(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TinyMDE = {}));
})(this, (function (exports) { 'use strict';

  const svg = {
    blockquote: `<svg height="18" width="18"><rect width="5" height="5" x="3" y="4" ry="1"/><rect ry="1" y="4" x="10" height="5" width="5"/><path d="M8 6.999v3c0 1-1 3-1 3s-.331 1-1.331 1h-1c-1 0-.669-1-.669-1s1-2 1-3v-3zm7 0v3c0 1-1 3-1 3s-.331 1-1.331 1h-1c-1 0-.669-1-.669-1s1-2 1-3v-3z"/></svg>`,
    bold: `<svg height="18" width="18"><path d="M4 2a1 1 0 00-1 1v12a1 1 0 001 1h6c4 0 5-2 5-4 0-1.322-.434-2.636-1.885-3.381C13.772 7.885 14 6.945 14 6c0-2-1-4-5-4zm1 2h4c1.668 0 2.32.393 2.6.672.28.279.4.662.4 1.328s-.12 1.057-.4 1.338c-.275.274-1.014.646-2.6.662H5zm5 6c1.666.005 2.318.388 2.596.666.277.278.404.667.404 1.334s-.127 1.06-.404 1.338c-.278.278-.93.66-2.596.662l-4.992.004L5 10z"/></svg>`,
    clear_formatting: `<svg height="18" width="18"><path d="M11.03 1a1 1 0 00-.74.3l-9 9a1 1 0 000 1.4l4 4A1 1 0 006 16h2a1 1 0 00.7-.3l8-8a1 1 0 000-1.4l-5-5a1 1 0 00-.67-.3zM8.7 5.7l3.58 3.6L7.6 14H6.4l-3-3 5.3-5.3z"/><rect ry=".8" rx=".8" y="14" x="16" height="2" width="2"/><rect width="2" height="2" x="13" y="14" rx=".8" ry=".8"/><rect ry=".8" rx=".8" y="14" x="10" height="2" width="2"/></svg>`,
    code: `<svg height="18" width="18"><path d="M13.5 2.994a.5.5 0 00-.5.5.5.5 0 000 .034V4.53a5.993 5.993 0 00-7.451-.445A6 6 0 1012.45 13.9a5.99 5.99 0 001.346-1.334.5.5 0 00.096-.101.5.5 0 00-.12-.698.5.5 0 00-.697.12l-.004-.005a5 5 0 01-1.197 1.2 5 5 0 111.215-6.965.5.5 0 00.697.12.5.5 0 00.211-.44V4.745H14V3.493a.5.5 0 00-.5-.5z"/></svg>`,
    h1: `<svg height="18" width="18"><path d="M3 2s0-1 1-1h1c1 0 1 1 1 1v6h6V2s0-1 1-1h1c1 0 1 1 1 1v14s0 1-1 1h-1c-1 0-1-1-1-1v-6H6v6s0 1-1 1H4c-1 0-1-1-1-1z"/></svg>`,
    h2: `<svg height="18" width="18"><path d="M4 2s0-1 1-1 1 1 1 1v6c1-1 2-1 4-1 3 0 4 2 4 4v5s0 1-1 1-1-1-1-1v-5c0-1.094-1-2-2-2-2 0-3 0-4 2v5s0 1-1 1-1-1-1-1z"/></svg>`,
    hr: `<svg height="18" width="18"><rect ry="1" y="8" height="2" width="18" style="font-variation-settings:normal;marker:none"/></svg>`,
    image: `<svg height="18" width="18"><path d="M1 2v14h16V2H1zm2 2h12v7l-3-3-4 4-2-2-3 3V4z"/><circle r="1.5" cy="6.5" cx="5.5"/></svg>`,
    italic: `<svg height="18" width="18"><path d="M9 2a1 1 0 000 2L7 14a1 1 0 100 2h2a1 1 0 000-2l2-10a1 1 0 100-2z"/></svg>`,
    link: `<svg height="18" width="18"><path d="M9.07 5.18a3.9 3.9 0 00-1.52.43C6.31 6.22 5.3 7.29 4.3 8.29c-1 1-2.07 2.02-2.68 3.26-.31.62-.5 1.33-.41 2.07.09.75.48 1.47 1.1 2.09.61.61 1.33 1 2.08 1.1.74.09 1.45-.1 2.07-.42 1.24-.61 2.26-1.68 3.26-2.68.46-.47.94-.94 1.39-1.44l-.43.26c-.68.34-1.49.56-2.36.46-.2-.03-.4-.08-.6-.14-.79.76-1.55 1.45-2.16 1.76-.38.19-.67.24-.92.21-.26-.03-.54-.14-.92-.53-.39-.38-.5-.66-.53-.91-.03-.26.02-.55.21-.93.39-.76 1.32-1.74 2.32-2.74 1-1 1.98-1.93 2.74-2.32.38-.19.67-.24.93-.21.25.03.53.14.91.53.39.38.5.66.53.92v.06l1.12-1.06.44-.47c-.18-.3-.4-.6-.67-.87-.62-.61-1.34-1-2.09-1.1a3.08 3.08 0 00-.55-.01z"/><path d="M13.07.86a3.9 3.9 0 00-1.52.43c-1.24.62-2.26 1.69-3.26 2.69-.46.47-.94.94-1.39 1.43.15-.08.28-.18.43-.25a4.4 4.4 0 012.36-.46c.2.02.4.07.6.14.79-.77 1.55-1.46 2.16-1.76.38-.19.67-.25.93-.21.25.03.53.14.91.52.39.38.5.66.53.92.03.26-.02.55-.21.93-.39.76-1.32 1.74-2.32 2.74-1 1-1.98 1.93-2.74 2.31-.38.2-.67.25-.93.22-.25-.04-.53-.15-.91-.53-.39-.38-.5-.66-.53-.92V9c-.36.33-.73.67-1.12 1.06l-.43.46c.17.3.4.6.66.87.62.62 1.34 1 2.08 1.1.75.1 1.46-.1 2.08-.41 1.24-.62 2.26-1.69 3.26-2.69s2.07-2.02 2.68-3.26c.31-.62.5-1.32.41-2.07a3.63 3.63 0 00-1.1-2.08c-.61-.62-1.33-1-2.07-1.1a3.08 3.08 0 00-.56-.02z"/></svg>`,
    ol: `<svg height="18" width="18"><path d="M1.5 7a.5.5 0 100 1h1a.5.5 0 01.5.5c0 .164-.08.31-.14.355l-1.655 1.25A.492.492 0 001 10.5a.5.5 0 00.5.5h2a.5.5 0 000-1H3l.398-.299A1.5 1.5 0 002.5 7z"/><path d="M1.5 12c-.667 0-.667 1 0 1h1.25c.333 0 .333.5 0 .5H2.5c-.667 0-.667 1 0 1h.25c.333 0 .333.5 0 .5H1.5c-.667 0-.667 1 0 1h1c.398 0 .78-.131 1.06-.365.282-.235.44-.554.44-.885a1.121 1.121 0 00-.303-.75c.191-.204.3-.47.303-.75 0-.332-.158-.651-.44-.885-.3-.241-.675-.37-1.06-.365z"/><rect y="13" x="6" height="2" width="12" ry="1"/><rect ry="1" width="12" height="2" x="6" y="8"/><rect y="3" x="6" height="2" width="12" ry="1"/><path d="M1.5 2a.5.5 0 100 1H2v2h-.5a.5.5 0 100 1h2a.5.5 0 100-1H3V2.5c0-.277-.223-.5-.5-.5z"/></svg>`,
    strikethrough: `<svg width="18" height="18"><path d="M10 2C6 2 4 4 4 6c0 .338.08.672.193 1h2.34C6.113 6.629 6 6.295 6 6c0-.334.117-.725.691-1.154C7.265 4.416 8.331 4 10 4h3a1 1 0 000-2zm1.477 9c.413.368.523.706.523 1 0 .334-.127.712-.701 1.143-.575.43-1.632.85-3.299.857l-1.006.007V14H5a1 1 0 000 2h3c4 0 6-2 6-4 0-.338-.081-.672-.195-1z"/><rect ry="1" y="8" x="1" height="2" width="16"/></svg>`,
    ul: `<svg height="18" width="18"><circle cx="2" cy="9" r="2"/><circle cy="4" cx="2" r="2"/><rect y="3" x="6" height="2" width="12" ry="1"/><circle cx="2" cy="14" r="2"/><rect ry="1" width="12" height="2" x="6" y="8"/><rect y="13" x="6" height="2" width="12" ry="1"/></svg>`
  };

  const isMacLike = /(Mac|iPhone|iPod|iPad)/i.test(typeof navigator !== "undefined" ? navigator.platform : "");
  const DefaultCommands = {
    'bold': {
      name: 'bold',
      action: 'bold',
      innerHTML: svg.bold,
      title: 'Bold',
      hotkey: 'Mod-B'
    },
    'italic': {
      name: 'italic',
      action: 'italic',
      innerHTML: svg.italic,
      title: 'Italic',
      hotkey: 'Mod-I'
    },
    'strikethrough': {
      name: 'strikethrough',
      action: 'strikethrough',
      innerHTML: svg.strikethrough,
      title: 'Strikethrough',
      hotkey: 'Mod2-Shift-5'
    },
    'code': {
      name: 'code',
      action: 'code',
      innerHTML: svg.code,
      title: 'Format as code'
    },
    'h1': {
      name: 'h1',
      action: 'h1',
      innerHTML: svg.h1,
      title: 'Level 1 heading',
      hotkey: 'Mod-Shift-1'
    },
    'h2': {
      name: 'h2',
      action: 'h2',
      innerHTML: svg.h2,
      title: 'Level 2 heading',
      hotkey: 'Mod-Shift-2'
    },
    'ul': {
      name: 'ul',
      action: 'ul',
      innerHTML: svg.ul,
      title: 'Bulleted list'
    },
    'ol': {
      name: 'ol',
      action: 'ol',
      innerHTML: svg.ol,
      title: 'Numbered list'
    },
    'blockquote': {
      name: 'blockquote',
      action: 'blockquote',
      innerHTML: svg.blockquote,
      title: 'Quote',
      hotkey: 'Mod2-Shift-Q'
    },
    'insertLink': {
      name: 'insertLink',
      action: editor => {
        if (editor.isInlineFormattingAllowed()) editor.wrapSelection('[', ']()');
      },
      enabled: (editor, focus, anchor) => editor.isInlineFormattingAllowed(focus, anchor) ? false : null,
      innerHTML: svg.link,
      title: 'Insert link',
      hotkey: 'Mod-K'
    },
    'insertImage': {
      name: 'insertImage',
      action: editor => {
        if (editor.isInlineFormattingAllowed()) editor.wrapSelection('![', ']()');
      },
      enabled: (editor, focus, anchor) => editor.isInlineFormattingAllowed(focus, anchor) ? false : null,
      innerHTML: svg.image,
      title: 'Insert image',
      hotkey: 'Mod2-Shift-I'
    },
    'hr': {
      name: 'hr',
      action: editor => editor.paste('\n***\n'),
      enabled: () => false,
      innerHTML: svg.hr,
      title: 'Insert horizontal line',
      hotkey: 'Mod2-Shift-L'
    }
  };
  class CommandBar {
    constructor(props) {
      this.e = null;
      this.editor = null;
      this.commands = [];
      this.buttons = {};
      this.state = {};
      this.hotkeys = [];
      let element = props.element;
      if (element && !element.tagName) {
        element = document.getElementById(props.element);
      }
      if (!element) {
        element = document.body;
      }
      this.createCommandBarElement(element, props.commands || ['bold', 'italic', 'strikethrough', '|', 'code', '|', 'h1', 'h2', '|', 'ul', 'ol', '|', 'blockquote', 'hr', '|', 'insertLink', 'insertImage']);
      document.addEventListener('keydown', e => this.handleKeydown(e));
      if (props.editor) this.setEditor(props.editor);
    }
    createCommandBarElement(parentElement, commands) {
      this.e = document.createElement('div');
      this.e.className = 'TMCommandBar';
      for (let command of commands) {
        if (command == '|') {
          let el = document.createElement('div');
          el.className = 'TMCommandDivider';
          this.e.appendChild(el);
        } else {
          let commandName;
          if (typeof command == "string") {
            // Reference to default command

            if (DefaultCommands[command]) {
              commandName = command;
              this.commands[commandName] = DefaultCommands[commandName];
            } else {
              continue;
            }
          } else if (typeof command == "object" && command.name) {
            commandName = command.name;
            this.commands[commandName] = {};
            if (DefaultCommands[commandName]) Object.assign(this.commands[commandName], DefaultCommands[commandName]);
            Object.assign(this.commands[commandName], command);
          } else {
            continue;
          }
          let title = this.commands[commandName].title || commandName;
          if (this.commands[commandName].hotkey) {
            const keys = this.commands[commandName].hotkey.split('-');
            // construct modifiers
            let modifiers = [];
            let modifierexplanation = [];
            for (let i = 0; i < keys.length - 1; i++) {
              switch (keys[i]) {
                case 'Ctrl':
                  modifiers.push('ctrlKey');
                  modifierexplanation.push('Ctrl');
                  break;
                case 'Cmd':
                  modifiers.push('metaKey');
                  modifierexplanation.push('⌘');
                  break;
                case 'Alt':
                  modifiers.push('altKey');
                  modifierexplanation.push('Alt');
                  break;
                case 'Option':
                  modifiers.push('altKey');
                  modifierexplanation.push('⌥');
                  break;
                case 'Win':
                  modifiers.push('metaKey');
                  modifierexplanation.push('⊞ Win');
                  break;
                case 'Shift':
                  modifiers.push('shiftKey');
                  modifierexplanation.push('⇧');
                  break;
                case 'Mod':
                  // Mod is a convenience mechanism: Ctrl on Windows, Cmd on Mac
                  if (isMacLike) {
                    modifiers.push('metaKey');
                    modifierexplanation.push('⌘');
                  } else {
                    modifiers.push('ctrlKey');
                    modifierexplanation.push('Ctrl');
                  }
                  break;
                case 'Mod2':
                  modifiers.push('altKey');
                  if (isMacLike) modifierexplanation.push('⌥');else modifierexplanation.push('Alt');
                  break;
                // Mod2 is a convenience mechanism: Alt on Windows, Option on Mac
              }
            }

            modifierexplanation.push(keys[keys.length - 1]);
            let hotkey = {
              modifiers: modifiers,
              command: commandName
            };
            // TODO Right now this is working only for letters and numbers
            if (keys[keys.length - 1].match(/^[0-9]$/)) {
              hotkey.code = `Digit${keys[keys.length - 1]}`;
            } else {
              hotkey.key = keys[keys.length - 1].toLowerCase();
            }
            this.hotkeys.push(hotkey);
            title = title.concat(` (${modifierexplanation.join('+')})`);
          }
          this.buttons[commandName] = document.createElement('div');
          this.buttons[commandName].className = 'TMCommandButton TMCommandButton_Disabled';
          this.buttons[commandName].title = title;
          this.buttons[commandName].innerHTML = this.commands[commandName].innerHTML;
          this.buttons[commandName].addEventListener('mousedown', e => this.handleClick(commandName, e));
          this.e.appendChild(this.buttons[commandName]);
        }
      }
      parentElement.appendChild(this.e);
    }
    handleClick(commandName, event) {
      if (!this.editor) return;
      event.preventDefault();
      if (typeof this.commands[commandName].action == "string") {
        if (this.state[commandName] === false) this.editor.setCommandState(commandName, true);else this.editor.setCommandState(commandName, false);
      } else if (typeof this.commands[commandName].action == "function") {
        this.commands[commandName].action(this.editor);
      }
    }
    setEditor(editor) {
      this.editor = editor;
      editor.addEventListener('selection', e => this.handleSelection(e));
    }
    handleSelection(event) {
      if (event.commandState) {
        for (let command in this.commands) {
          if (event.commandState[command] === undefined) {
            if (this.commands[command].enabled) this.state[command] = this.commands[command].enabled(this.editor, event.focus, event.anchor);else this.state[command] = event.focus ? false : null;
          } else {
            this.state[command] = event.commandState[command];
          }
          if (this.state[command] === true) {
            this.buttons[command].className = 'TMCommandButton TMCommandButton_Active';
          } else if (this.state[command] === false) {
            this.buttons[command].className = 'TMCommandButton TMCommandButton_Inactive';
          } else {
            this.buttons[command].className = 'TMCommandButton TMCommandButton_Disabled';
          }
        }
      }
    }
    handleKeydown(event) {
      outer: for (let hotkey of this.hotkeys) {
        if (hotkey.key && event.key.toLowerCase() == hotkey.key || hotkey.code && event.code == hotkey.code) {
          // Key matches hotkey. Look for any required modifier that wasn't pressed
          for (let modifier of hotkey.modifiers) {
            if (!event[modifier]) continue outer;
          }
          // Everything matches.
          this.handleClick(hotkey.command, event);
          return;
        }
      }
    }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var check = function (it) {
    return it && it.Math === Math && it;
  };

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global$b =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
  // eslint-disable-next-line no-new-func -- fallback
  function () {
    return this;
  }() || commonjsGlobal || Function('return this')();

  var fails$7 = function (exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  var fails$6 = fails$7;

  // Detect IE8's incomplete defineProperty implementation
  var descriptors = !fails$6(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty({}, 1, {
      get: function () {
        return 7;
      }
    })[1] !== 7;
  });

  var makeBuiltInExports = {};
  var makeBuiltIn$2 = {
    get exports(){ return makeBuiltInExports; },
    set exports(v){ makeBuiltInExports = v; },
  };

  var fails$5 = fails$7;
  var functionBindNative = !fails$5(function () {
    // eslint-disable-next-line es/no-function-prototype-bind -- safe
    var test = function () {/* empty */}.bind();
    // eslint-disable-next-line no-prototype-builtins -- safe
    return typeof test != 'function' || test.hasOwnProperty('prototype');
  });

  var NATIVE_BIND$1 = functionBindNative;
  var FunctionPrototype$1 = Function.prototype;
  var call$3 = FunctionPrototype$1.call;
  var uncurryThisWithBind = NATIVE_BIND$1 && FunctionPrototype$1.bind.bind(call$3, call$3);
  var functionUncurryThis = NATIVE_BIND$1 ? uncurryThisWithBind : function (fn) {
    return function () {
      return call$3.apply(fn, arguments);
    };
  };

  var documentAll$2 = typeof document == 'object' && document.all;

  // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
  // eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
  var IS_HTMLDDA = typeof documentAll$2 == 'undefined' && documentAll$2 !== undefined;
  var documentAll_1 = {
    all: documentAll$2,
    IS_HTMLDDA: IS_HTMLDDA
  };

  var $documentAll$1 = documentAll_1;
  var documentAll$1 = $documentAll$1.all;

  // `IsCallable` abstract operation
  // https://tc39.es/ecma262/#sec-iscallable
  var isCallable$8 = $documentAll$1.IS_HTMLDDA ? function (argument) {
    return typeof argument == 'function' || argument === documentAll$1;
  } : function (argument) {
    return typeof argument == 'function';
  };

  // we can't use just `it == null` since of `document.all` special case
  // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
  var isNullOrUndefined$2 = function (it) {
    return it === null || it === undefined;
  };

  var isNullOrUndefined$1 = isNullOrUndefined$2;
  var $TypeError$5 = TypeError;

  // `RequireObjectCoercible` abstract operation
  // https://tc39.es/ecma262/#sec-requireobjectcoercible
  var requireObjectCoercible$1 = function (it) {
    if (isNullOrUndefined$1(it)) throw new $TypeError$5("Can't call method on " + it);
    return it;
  };

  var requireObjectCoercible = requireObjectCoercible$1;
  var $Object$1 = Object;

  // `ToObject` abstract operation
  // https://tc39.es/ecma262/#sec-toobject
  var toObject$1 = function (argument) {
    return $Object$1(requireObjectCoercible(argument));
  };

  var uncurryThis$4 = functionUncurryThis;
  var toObject = toObject$1;
  var hasOwnProperty = uncurryThis$4({}.hasOwnProperty);

  // `HasOwnProperty` abstract operation
  // https://tc39.es/ecma262/#sec-hasownproperty
  // eslint-disable-next-line es/no-object-hasown -- safe
  var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty(toObject(it), key);
  };

  var DESCRIPTORS$6 = descriptors;
  var hasOwn$3 = hasOwnProperty_1;
  var FunctionPrototype = Function.prototype;
  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
  var getDescriptor = DESCRIPTORS$6 && Object.getOwnPropertyDescriptor;
  var EXISTS$1 = hasOwn$3(FunctionPrototype, 'name');
  // additional protection from minified / mangled / dropped function names
  var PROPER = EXISTS$1 && function something() {/* empty */}.name === 'something';
  var CONFIGURABLE$1 = EXISTS$1 && (!DESCRIPTORS$6 || DESCRIPTORS$6 && getDescriptor(FunctionPrototype, 'name').configurable);
  var functionName = {
    EXISTS: EXISTS$1,
    PROPER: PROPER,
    CONFIGURABLE: CONFIGURABLE$1
  };

  var global$a = global$b;

  // eslint-disable-next-line es/no-object-defineproperty -- safe
  var defineProperty$2 = Object.defineProperty;
  var defineGlobalProperty$1 = function (key, value) {
    try {
      defineProperty$2(global$a, key, {
        value: value,
        configurable: true,
        writable: true
      });
    } catch (error) {
      global$a[key] = value;
    }
    return value;
  };

  var global$9 = global$b;
  var defineGlobalProperty = defineGlobalProperty$1;
  var SHARED = '__core-js_shared__';
  var store$3 = global$9[SHARED] || defineGlobalProperty(SHARED, {});
  var sharedStore = store$3;

  var uncurryThis$3 = functionUncurryThis;
  var isCallable$7 = isCallable$8;
  var store$2 = sharedStore;
  var functionToString = uncurryThis$3(Function.toString);

  // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
  if (!isCallable$7(store$2.inspectSource)) {
    store$2.inspectSource = function (it) {
      return functionToString(it);
    };
  }
  var inspectSource$1 = store$2.inspectSource;

  var global$8 = global$b;
  var isCallable$6 = isCallable$8;
  var WeakMap$1 = global$8.WeakMap;
  var weakMapBasicDetection = isCallable$6(WeakMap$1) && /native code/.test(String(WeakMap$1));

  var isCallable$5 = isCallable$8;
  var $documentAll = documentAll_1;
  var documentAll = $documentAll.all;
  var isObject$5 = $documentAll.IS_HTMLDDA ? function (it) {
    return typeof it == 'object' ? it !== null : isCallable$5(it) || it === documentAll;
  } : function (it) {
    return typeof it == 'object' ? it !== null : isCallable$5(it);
  };

  var objectDefineProperty = {};

  var global$7 = global$b;
  var isObject$4 = isObject$5;
  var document$1 = global$7.document;
  // typeof document.createElement is 'object' in old IE
  var EXISTS = isObject$4(document$1) && isObject$4(document$1.createElement);
  var documentCreateElement = function (it) {
    return EXISTS ? document$1.createElement(it) : {};
  };

  var DESCRIPTORS$5 = descriptors;
  var fails$4 = fails$7;
  var createElement = documentCreateElement;

  // Thanks to IE8 for its funny defineProperty
  var ie8DomDefine = !DESCRIPTORS$5 && !fails$4(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(createElement('div'), 'a', {
      get: function () {
        return 7;
      }
    }).a !== 7;
  });

  var DESCRIPTORS$4 = descriptors;
  var fails$3 = fails$7;

  // V8 ~ Chrome 36-
  // https://bugs.chromium.org/p/v8/issues/detail?id=3334
  var v8PrototypeDefineBug = DESCRIPTORS$4 && fails$3(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(function () {/* empty */}, 'prototype', {
      value: 42,
      writable: false
    }).prototype !== 42;
  });

  var isObject$3 = isObject$5;
  var $String$3 = String;
  var $TypeError$4 = TypeError;

  // `Assert: Type(argument) is Object`
  var anObject$2 = function (argument) {
    if (isObject$3(argument)) return argument;
    throw new $TypeError$4($String$3(argument) + ' is not an object');
  };

  var NATIVE_BIND = functionBindNative;
  var call$2 = Function.prototype.call;
  var functionCall = NATIVE_BIND ? call$2.bind(call$2) : function () {
    return call$2.apply(call$2, arguments);
  };

  var global$6 = global$b;
  var isCallable$4 = isCallable$8;
  var aFunction = function (argument) {
    return isCallable$4(argument) ? argument : undefined;
  };
  var getBuiltIn$1 = function (namespace, method) {
    return arguments.length < 2 ? aFunction(global$6[namespace]) : global$6[namespace] && global$6[namespace][method];
  };

  var uncurryThis$2 = functionUncurryThis;
  var objectIsPrototypeOf = uncurryThis$2({}.isPrototypeOf);

  var engineUserAgent = typeof navigator != 'undefined' && String(navigator.userAgent) || '';

  var global$5 = global$b;
  var userAgent = engineUserAgent;
  var process = global$5.process;
  var Deno = global$5.Deno;
  var versions = process && process.versions || Deno && Deno.version;
  var v8 = versions && versions.v8;
  var match, version;
  if (v8) {
    match = v8.split('.');
    // in old Chrome, versions of V8 isn't V8 = Chrome / 10
    // but their correct versions are not interesting for us
    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
  }

  // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
  // so check `userAgent` even if `.v8` exists, but 0
  if (!version && userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = userAgent.match(/Chrome\/(\d+)/);
      if (match) version = +match[1];
    }
  }
  var engineV8Version = version;

  /* eslint-disable es/no-symbol -- required for testing */
  var V8_VERSION = engineV8Version;
  var fails$2 = fails$7;
  var global$4 = global$b;
  var $String$2 = global$4.String;

  // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
  var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$2(function () {
    var symbol = Symbol('symbol detection');
    // Chrome 38 Symbol has incorrect toString conversion
    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
    // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
    // of course, fail.
    return !$String$2(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
  });

  /* eslint-disable es/no-symbol -- required for testing */
  var NATIVE_SYMBOL$1 = symbolConstructorDetection;
  var useSymbolAsUid = NATIVE_SYMBOL$1 && !Symbol.sham && typeof Symbol.iterator == 'symbol';

  var getBuiltIn = getBuiltIn$1;
  var isCallable$3 = isCallable$8;
  var isPrototypeOf = objectIsPrototypeOf;
  var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
  var $Object = Object;
  var isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    var $Symbol = getBuiltIn('Symbol');
    return isCallable$3($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
  };

  var $String$1 = String;
  var tryToString$1 = function (argument) {
    try {
      return $String$1(argument);
    } catch (error) {
      return 'Object';
    }
  };

  var isCallable$2 = isCallable$8;
  var tryToString = tryToString$1;
  var $TypeError$3 = TypeError;

  // `Assert: IsCallable(argument) is true`
  var aCallable$1 = function (argument) {
    if (isCallable$2(argument)) return argument;
    throw new $TypeError$3(tryToString(argument) + ' is not a function');
  };

  var aCallable = aCallable$1;
  var isNullOrUndefined = isNullOrUndefined$2;

  // `GetMethod` abstract operation
  // https://tc39.es/ecma262/#sec-getmethod
  var getMethod$1 = function (V, P) {
    var func = V[P];
    return isNullOrUndefined(func) ? undefined : aCallable(func);
  };

  var call$1 = functionCall;
  var isCallable$1 = isCallable$8;
  var isObject$2 = isObject$5;
  var $TypeError$2 = TypeError;

  // `OrdinaryToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-ordinarytoprimitive
  var ordinaryToPrimitive$1 = function (input, pref) {
    var fn, val;
    if (pref === 'string' && isCallable$1(fn = input.toString) && !isObject$2(val = call$1(fn, input))) return val;
    if (isCallable$1(fn = input.valueOf) && !isObject$2(val = call$1(fn, input))) return val;
    if (pref !== 'string' && isCallable$1(fn = input.toString) && !isObject$2(val = call$1(fn, input))) return val;
    throw new $TypeError$2("Can't convert object to primitive value");
  };

  var sharedExports = {};
  var shared$3 = {
    get exports(){ return sharedExports; },
    set exports(v){ sharedExports = v; },
  };

  var store$1 = sharedStore;
  (shared$3.exports = function (key, value) {
    return store$1[key] || (store$1[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.33.0',
    mode: 'global',
    copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',
    license: 'https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE',
    source: 'https://github.com/zloirock/core-js'
  });

  var uncurryThis$1 = functionUncurryThis;
  var id = 0;
  var postfix = Math.random();
  var toString = uncurryThis$1(1.0.toString);
  var uid$2 = function (key) {
    return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
  };

  var global$3 = global$b;
  var shared$2 = sharedExports;
  var hasOwn$2 = hasOwnProperty_1;
  var uid$1 = uid$2;
  var NATIVE_SYMBOL = symbolConstructorDetection;
  var USE_SYMBOL_AS_UID = useSymbolAsUid;
  var Symbol$1 = global$3.Symbol;
  var WellKnownSymbolsStore = shared$2('wks');
  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1['for'] || Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;
  var wellKnownSymbol$1 = function (name) {
    if (!hasOwn$2(WellKnownSymbolsStore, name)) {
      WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn$2(Symbol$1, name) ? Symbol$1[name] : createWellKnownSymbol('Symbol.' + name);
    }
    return WellKnownSymbolsStore[name];
  };

  var call = functionCall;
  var isObject$1 = isObject$5;
  var isSymbol$1 = isSymbol$2;
  var getMethod = getMethod$1;
  var ordinaryToPrimitive = ordinaryToPrimitive$1;
  var wellKnownSymbol = wellKnownSymbol$1;
  var $TypeError$1 = TypeError;
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

  // `ToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-toprimitive
  var toPrimitive$1 = function (input, pref) {
    if (!isObject$1(input) || isSymbol$1(input)) return input;
    var exoticToPrim = getMethod(input, TO_PRIMITIVE);
    var result;
    if (exoticToPrim) {
      if (pref === undefined) pref = 'default';
      result = call(exoticToPrim, input, pref);
      if (!isObject$1(result) || isSymbol$1(result)) return result;
      throw new $TypeError$1("Can't convert object to primitive value");
    }
    if (pref === undefined) pref = 'number';
    return ordinaryToPrimitive(input, pref);
  };

  var toPrimitive = toPrimitive$1;
  var isSymbol = isSymbol$2;

  // `ToPropertyKey` abstract operation
  // https://tc39.es/ecma262/#sec-topropertykey
  var toPropertyKey$1 = function (argument) {
    var key = toPrimitive(argument, 'string');
    return isSymbol(key) ? key : key + '';
  };

  var DESCRIPTORS$3 = descriptors;
  var IE8_DOM_DEFINE = ie8DomDefine;
  var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
  var anObject$1 = anObject$2;
  var toPropertyKey = toPropertyKey$1;
  var $TypeError = TypeError;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  var $defineProperty = Object.defineProperty;
  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = 'enumerable';
  var CONFIGURABLE = 'configurable';
  var WRITABLE = 'writable';

  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  objectDefineProperty.f = DESCRIPTORS$3 ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
    anObject$1(O);
    P = toPropertyKey(P);
    anObject$1(Attributes);
    if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
      var current = $getOwnPropertyDescriptor(O, P);
      if (current && current[WRITABLE]) {
        O[P] = Attributes.value;
        Attributes = {
          configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
          enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
          writable: false
        };
      }
    }
    return $defineProperty(O, P, Attributes);
  } : $defineProperty : function defineProperty(O, P, Attributes) {
    anObject$1(O);
    P = toPropertyKey(P);
    anObject$1(Attributes);
    if (IE8_DOM_DEFINE) try {
      return $defineProperty(O, P, Attributes);
    } catch (error) {/* empty */}
    if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var createPropertyDescriptor$1 = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var DESCRIPTORS$2 = descriptors;
  var definePropertyModule = objectDefineProperty;
  var createPropertyDescriptor = createPropertyDescriptor$1;
  var createNonEnumerableProperty$1 = DESCRIPTORS$2 ? function (object, key, value) {
    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var shared$1 = sharedExports;
  var uid = uid$2;
  var keys = shared$1('keys');
  var sharedKey$1 = function (key) {
    return keys[key] || (keys[key] = uid(key));
  };

  var NATIVE_WEAK_MAP = weakMapBasicDetection;
  var global$2 = global$b;
  var isObject = isObject$5;
  var createNonEnumerableProperty = createNonEnumerableProperty$1;
  var hasOwn$1 = hasOwnProperty_1;
  var shared = sharedStore;
  var sharedKey = sharedKey$1;
  var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
  var TypeError$1 = global$2.TypeError;
  var WeakMap = global$2.WeakMap;
  var set, get, has;
  var enforce = function (it) {
    return has(it) ? get(it) : set(it, {});
  };
  var getterFor = function (TYPE) {
    return function (it) {
      var state;
      if (!isObject(it) || (state = get(it)).type !== TYPE) {
        throw new TypeError$1('Incompatible receiver, ' + TYPE + ' required');
      }
      return state;
    };
  };
  if (NATIVE_WEAK_MAP || shared.state) {
    var store = shared.state || (shared.state = new WeakMap());
    /* eslint-disable no-self-assign -- prototype methods protection */
    store.get = store.get;
    store.has = store.has;
    store.set = store.set;
    /* eslint-enable no-self-assign -- prototype methods protection */
    set = function (it, metadata) {
      if (store.has(it)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      store.set(it, metadata);
      return metadata;
    };
    get = function (it) {
      return store.get(it) || {};
    };
    has = function (it) {
      return store.has(it);
    };
  } else {
    var STATE = sharedKey('state');
    set = function (it, metadata) {
      if (hasOwn$1(it, STATE)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      createNonEnumerableProperty(it, STATE, metadata);
      return metadata;
    };
    get = function (it) {
      return hasOwn$1(it, STATE) ? it[STATE] : {};
    };
    has = function (it) {
      return hasOwn$1(it, STATE);
    };
  }
  var internalState = {
    set: set,
    get: get,
    has: has,
    enforce: enforce,
    getterFor: getterFor
  };

  var uncurryThis = functionUncurryThis;
  var fails$1 = fails$7;
  var isCallable = isCallable$8;
  var hasOwn = hasOwnProperty_1;
  var DESCRIPTORS$1 = descriptors;
  var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
  var inspectSource = inspectSource$1;
  var InternalStateModule = internalState;
  var enforceInternalState = InternalStateModule.enforce;
  var getInternalState = InternalStateModule.get;
  var $String = String;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  var defineProperty$1 = Object.defineProperty;
  var stringSlice = uncurryThis(''.slice);
  var replace = uncurryThis(''.replace);
  var join = uncurryThis([].join);
  var CONFIGURABLE_LENGTH = DESCRIPTORS$1 && !fails$1(function () {
    return defineProperty$1(function () {/* empty */}, 'length', {
      value: 8
    }).length !== 8;
  });
  var TEMPLATE = String(String).split('String');
  var makeBuiltIn$1 = makeBuiltIn$2.exports = function (value, name, options) {
    if (stringSlice($String(name), 0, 7) === 'Symbol(') {
      name = '[' + replace($String(name), /^Symbol\(([^)]*)\)/, '$1') + ']';
    }
    if (options && options.getter) name = 'get ' + name;
    if (options && options.setter) name = 'set ' + name;
    if (!hasOwn(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
      if (DESCRIPTORS$1) defineProperty$1(value, 'name', {
        value: name,
        configurable: true
      });else value.name = name;
    }
    if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
      defineProperty$1(value, 'length', {
        value: options.arity
      });
    }
    try {
      if (options && hasOwn(options, 'constructor') && options.constructor) {
        if (DESCRIPTORS$1) defineProperty$1(value, 'prototype', {
          writable: false
        });
        // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
      } else if (value.prototype) value.prototype = undefined;
    } catch (error) {/* empty */}
    var state = enforceInternalState(value);
    if (!hasOwn(state, 'source')) {
      state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
    }
    return value;
  };

  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  // eslint-disable-next-line no-extend-native -- required
  Function.prototype.toString = makeBuiltIn$1(function toString() {
    return isCallable(this) && getInternalState(this).source || inspectSource(this);
  }, 'toString');

  var makeBuiltIn = makeBuiltInExports;
  var defineProperty = objectDefineProperty;
  var defineBuiltInAccessor$1 = function (target, name, descriptor) {
    if (descriptor.get) makeBuiltIn(descriptor.get, name, {
      getter: true
    });
    if (descriptor.set) makeBuiltIn(descriptor.set, name, {
      setter: true
    });
    return defineProperty.f(target, name, descriptor);
  };

  var anObject = anObject$2;

  // `RegExp.prototype.flags` getter implementation
  // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
  var regexpFlags = function () {
    var that = anObject(this);
    var result = '';
    if (that.hasIndices) result += 'd';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.dotAll) result += 's';
    if (that.unicode) result += 'u';
    if (that.unicodeSets) result += 'v';
    if (that.sticky) result += 'y';
    return result;
  };

  var global$1 = global$b;
  var DESCRIPTORS = descriptors;
  var defineBuiltInAccessor = defineBuiltInAccessor$1;
  var regExpFlags = regexpFlags;
  var fails = fails$7;

  // babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError
  var RegExp$1 = global$1.RegExp;
  var RegExpPrototype = RegExp$1.prototype;
  var FORCED = DESCRIPTORS && fails(function () {
    var INDICES_SUPPORT = true;
    try {
      RegExp$1('.', 'd');
    } catch (error) {
      INDICES_SUPPORT = false;
    }
    var O = {};
    // modern V8 bug
    var calls = '';
    var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';
    var addGetter = function (key, chr) {
      // eslint-disable-next-line es/no-object-defineproperty -- safe
      Object.defineProperty(O, key, {
        get: function () {
          calls += chr;
          return true;
        }
      });
    };
    var pairs = {
      dotAll: 's',
      global: 'g',
      ignoreCase: 'i',
      multiline: 'm',
      sticky: 'y'
    };
    if (INDICES_SUPPORT) pairs.hasIndices = 'd';
    for (var key in pairs) addGetter(key, pairs[key]);

    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);
    return result !== expected || calls !== expected;
  });

  // `RegExp.prototype.flags` getter
  // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
  if (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {
    configurable: true,
    get: regExpFlags
  });

  // const replacements = {
  //   ASCIIPunctuation: '!"#$%&\'()*+,\\-./:;<=>?@\\[\\]^_`{|}~',
  //   TriggerChars: '`_\*\[\]\(\)',
  //   Scheme: `[A-Za-z][A-Za-z0-9\+\.\-]{1,31}`,
  //   Email: `[a-zA-Z0-9.!#$%&'*+/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*`, // From CommonMark spec

  // }
  const replacements = {
    ASCIIPunctuation: /[!"#$%&'()*+,\-./:;<=>?@[\]^_`{|}~\\]/,
    NotTriggerChar: /[^`_*[\]()<>!~]/,
    Scheme: /[A-Za-z][A-Za-z0-9+.-]{1,31}/,
    Email: /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/,
    // From CommonMark spec
    HTMLOpenTag: /<HTMLTagName(?:HTMLAttribute)*\s*\/?>/,
    HTMLCloseTag: /<\/HTMLTagName\s*>/,
    HTMLTagName: /[A-Za-z][A-Za-z0-9-]*/,
    HTMLComment: /<!--(?:[^>-]|(?:[^>-](?:[^-]|-[^-])*[^-]))-->/,
    HTMLPI: /<\?(?:|.|(?:[^?]|\?[^>])*)\?>/,
    HTMLDeclaration: /<![A-Z]+\s[^>]*>/,
    HTMLCDATA: /<!\[CDATA\[.*?\]\]>/,
    HTMLAttribute: /\s+[A-Za-z_:][A-Za-z0-9_.:-]*(?:HTMLAttValue)?/,
    HTMLAttValue: /\s*=\s*(?:(?:'[^']*')|(?:"[^"]*")|(?:[^\s"'=<>`]+))/,
    KnownTag: /address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul/
  };

  // From CommonMark.js. 
  const punctuationLeading = new RegExp(/^(?:[!"#$%&'()*+,\-./:;<=>?@[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B])/);
  const punctuationTrailing = new RegExp(/(?:[!"#$%&'()*+,\-./:;<=>?@[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B])$/);

  // export const inlineTriggerChars = new RegExp(`[${replacements.TriggerChars}]`);

  /**
   * This is CommonMark's block grammar, but we're ignoring nested blocks here.  
   */
  const lineGrammar = {
    TMH1: {
      regexp: /^( {0,3}#\s)(.*?)((?:\s+#+\s*)?)$/,
      replacement: '<span class="TMMark TMMark_TMH1">$1</span>$$2<span class="TMMark TMMark_TMH1">$3</span>'
    },
    TMH2: {
      regexp: /^( {0,3}##\s)(.*?)((?:\s+#+\s*)?)$/,
      replacement: '<span class="TMMark TMMark_TMH2">$1</span>$$2<span class="TMMark TMMark_TMH2">$3</span>'
    },
    TMH3: {
      regexp: /^( {0,3}###\s)(.*?)((?:\s+#+\s*)?)$/,
      replacement: '<span class="TMMark TMMark_TMH3">$1</span>$$2<span class="TMMark TMMark_TMH3">$3</span>'
    },
    TMH4: {
      regexp: /^( {0,3}####\s)(.*?)((?:\s+#+\s*)?)$/,
      replacement: '<span class="TMMark TMMark_TMH4">$1</span>$$2<span class="TMMark TMMark_TMH4">$3</span>'
    },
    TMH5: {
      regexp: /^( {0,3}#####\s)(.*?)((?:\s+#+\s*)?)$/,
      replacement: '<span class="TMMark TMMark_TMH5">$1</span>$$2<span class="TMMark TMMark_TMH5">$3</span>'
    },
    TMH6: {
      regexp: /^( {0,3}######\s)(.*?)((?:\s+#+\s*)?)$/,
      replacement: '<span class="TMMark TMMark_TMH6">$1</span>$$2<span class="TMMark TMMark_TMH6">$3</span>'
    },
    TMBlockquote: {
      regexp: /^( {0,3}>[ ]?)(.*)$/,
      replacement: '<span class="TMMark TMMark_TMBlockquote">$1</span>$$2'
    },
    TMCodeFenceBacktickOpen: {
      regexp: /^( {0,3}(?<seq>````*)\s*)([^`]*?)(\s*)$/,
      replacement: '<span class="TMMark TMMark_TMCodeFenceBacktick">$1</span><span class="TMInfoString">$3</span>$4'
    },
    TMCodeFenceTildeOpen: {
      regexp: /^( {0,3}(?<seq>~~~~*)\s*)(.*?)(\s*)$/,
      replacement: '<span class="TMMark TMMark_TMCodeFenceTilde">$1</span><span class="TMInfoString">$3</span>$4'
    },
    TMCodeFenceBacktickClose: {
      regexp: /^( {0,3}(?<seq>````*))(\s*)$/,
      replacement: '<span class="TMMark TMMark_TMCodeFenceBacktick">$1</span>$3'
    },
    TMCodeFenceTildeClose: {
      regexp: /^( {0,3}(?<seq>~~~~*))(\s*)$/,
      replacement: '<span class="TMMark TMMark_TMCodeFenceTilde">$1</span>$3'
    },
    TMBlankLine: {
      regexp: /^([ \t]*)$/,
      replacement: '$0'
    },
    TMSetextH1Marker: {
      regexp: /^ {0,3}=+\s*$/,
      replacement: '<span class="TMMark TMMark_TMSetextH1Marker">$0</span>'
    },
    TMSetextH2Marker: {
      regexp: /^ {0,3}-+\s*$/,
      replacement: '<span class="TMMark TMMark_TMSetextH1Marker">$0</span>'
    },
    TMHR: {
      regexp: /^( {0,3}(\*[ \t]*\*[ \t]*\*[ \t*]*)|(-[ \t]*-[ \t]*-[ \t-]*)|(_[ \t]*_[ \t]*_[ \t_]*))$/,
      replacement: '<span class="TMMark TMMark_TMHR">$0</span>'
    },
    TMUL: {
      regexp: /^( {0,3}[+*-] {1,4})(.*)$/,
      replacement: '<span class="TMMark TMMark_TMUL">$1</span>$$2'
    },
    TMOL: {
      regexp: /^( {0,3}\d{1,9}[.)] {1,4})(.*)$/,
      replacement: '<span class="TMMark TMMark_TMOL">$1</span>$$2'
    },
    // TODO: This is currently preventing sublists (and any content within list items, really) from working
    TMIndentedCode: {
      regexp: /^( {4}|\t)(.*)$/,
      replacement: '<span class="TMMark TMMark_TMIndentedCode">$1</span>$2'
    },
    TMLinkReferenceDefinition: {
      // TODO: Link destination can't include unbalanced parantheses, but we just ignore that here 
      regexp: /^( {0,3}\[\s*)([^\s\]](?:[^\]]|\\\])*?)(\s*\]:\s*)((?:[^\s<>]+)|(?:<(?:[^<>\\]|\\.)*>))?(\s*)((?:\((?:[^()\\]|\\.)*\))|(?:"(?:[^"\\]|\\.)*")|(?:'(?:[^'\\]|\\.)*'))?(\s*)$/,
      replacement: '<span class="TMMark TMMark_TMLinkReferenceDefinition">$1</span><span class="TMLinkLabel TMLinkLabel_Definition">$2</span><span class="TMMark TMMark_TMLinkReferenceDefinition">$3</span><span class="TMLinkDestination">$4</span>$5<span class="TMLinkTitle">$6</span>$7',
      labelPlaceholder: 2 // this defines which placeholder in the above regex is the link "label"
    }
  };

  /**
   * HTML blocks have multiple different classes of opener and closer. This array defines all the cases
   */
  var htmlBlockGrammar = [{
    start: /^ {0,3}<(?:script|pre|style)(?:\s|>|$)/i,
    end: /(?:<\/script>|<\/pre>|<\/style>)/i,
    paraInterrupt: true
  }, {
    start: /^ {0,3}<!--/,
    end: /-->/,
    paraInterrupt: true
  }, {
    start: /^ {0,3}<\?/,
    end: /\?>/,
    paraInterrupt: true
  }, {
    start: /^ {0,3}<![A-Z]/,
    end: />/,
    paraInterrupt: true
  }, {
    start: /^ {0,3}<!\[CDATA\[/,
    end: /\]\]>/,
    paraInterrupt: true
  }, {
    start: /^ {0,3}(?:<|<\/)(?:KnownTag)(?:\s|>|\/>|$)/i,
    end: false,
    paraInterrupt: true
  }, {
    start: /^ {0,3}(?:HTMLOpenTag|HTMLCloseTag)\s*$/,
    end: false,
    paraInterrupt: false
  }];

  /**
   * Structure of the object:
   * Top level entries are rules, each consisting of a regular expressions (in string format) as well as a replacement.
   * In the regular expressions, replacements from the object 'replacements' will be processed before compiling into the property regexp.
   */
  var inlineGrammar = {
    escape: {
      regexp: /^\\(ASCIIPunctuation)/,
      replacement: '<span class="TMMark TMMark_TMEscape">\\</span>$1'
    },
    code: {
      regexp: /^(`+)((?:[^`])|(?:[^`].*?[^`]))(\1)/,
      replacement: '<span class="TMMark TMMark_TMCode">$1</span><code class="TMCode">$2</code><span class="TMMark TMMark_TMCode">$3</span>'
    },
    autolink: {
      regexp: /^<((?:Scheme:[^\s<>]*)|(?:Email))>/,
      replacement: '<span class="TMMark TMMark_TMAutolink">&lt;</span><span class="TMAutolink">$1</span><span class="TMMark TMMark_TMAutolink">&gt;</span>'
    },
    html: {
      regexp: /^((?:HTMLOpenTag)|(?:HTMLCloseTag)|(?:HTMLComment)|(?:HTMLPI)|(?:HTMLDeclaration)|(?:HTMLCDATA))/,
      replacement: '<span class="TMHTML">$1</span>'
    },
    linkOpen: {
      regexp: /^\[/,
      replacement: ''
    },
    imageOpen: {
      regexp: /^!\[/,
      replacement: ''
    },
    linkLabel: {
      regexp: /^(\[\s*)([^\]]*?)(\s*\])/,
      replacement: '',
      labelPlaceholder: 2
    },
    default: {
      regexp: /^(.|(?:NotTriggerChar+))/,
      replacement: '$1'
    }
  };

  // Process replacements in regexps
  const replacementRegexp = new RegExp(Object.keys(replacements).join('|'));

  // Inline
  const inlineRules = [...Object.keys(inlineGrammar)];
  for (let rule of inlineRules) {
    let re = inlineGrammar[rule].regexp.source;
    // Replace while there is something to replace. This means it also works over multiple levels (replacements containing replacements)
    while (re.match(replacementRegexp)) {
      re = re.replace(replacementRegexp, string => {
        return replacements[string].source;
      });
    }
    inlineGrammar[rule].regexp = new RegExp(re, inlineGrammar[rule].regexp.flags);
  }

  // HTML Block (only opening rule is processed currently)
  for (let rule of htmlBlockGrammar) {
    let re = rule.start.source;
    // Replace while there is something to replace. This means it also works over multiple levels (replacements containing replacements)
    while (re.match(replacementRegexp)) {
      re = re.replace(replacementRegexp, string => {
        return replacements[string].source;
      });
    }
    rule.start = new RegExp(re, rule.start.flags);
  }

  /**
   * Escapes HTML special characters (<, >, and &) in the string.
   * @param {string} string The raw string to be escaped
   * @returns {string} The string, ready to be used in HTML
   */
  function htmlescape(string) {
    return (string ? string : '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  /**
   * Contains the commands that can be sent to the editor. Contains objects with a name representing the name of the command.
   * Each of the objects contains the following keys:
   * 
   *   - type: Can be either inline (for inline formatting) or line (for block / line formatting).
   *   - className: Used to determine whether the command is active at a given position. 
   *     For line formatting, this looks at the class of the line element. For inline elements, tries to find an enclosing element with that class.
   *   - set / unset: Contain instructions how to set and unset the command. For line type commands, both consist of a pattern and replacement that 
   *     will be applied to each line (using String.replace). For inline type commands, the set object contains a pre and post string which will
   *     be inserted before and after the selection. The unset object contains a prePattern and a postPattern. Both should be regular expressions and 
   *     they will be applied to the portion of the line before and after the selection (using String.replace, with an empty replacement string).
   */
  const commands = {
    // Replacements for unset for inline commands are '' by default
    bold: {
      type: 'inline',
      className: 'TMStrong',
      set: {
        pre: '**',
        post: '**'
      },
      unset: {
        prePattern: /(?:\*\*|__)$/,
        postPattern: /^(?:\*\*|__)/
      }
    },
    italic: {
      type: 'inline',
      className: 'TMEm',
      set: {
        pre: '*',
        post: '*'
      },
      unset: {
        prePattern: /(?:\*|_)$/,
        postPattern: /^(?:\*|_)/
      }
    },
    code: {
      type: 'inline',
      className: 'TMCode',
      set: {
        pre: '`',
        post: '`'
      },
      unset: {
        prePattern: /`+$/,
        postPattern: /^`+/
      } // FIXME this doesn't ensure balanced backticks right now
    },

    strikethrough: {
      type: 'inline',
      className: 'TMStrikethrough',
      set: {
        pre: '~~',
        post: '~~'
      },
      unset: {
        prePattern: /~~$/,
        postPattern: /^~~/
      }
    },
    h1: {
      type: 'line',
      className: 'TMH1',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '# $2'
      },
      unset: {
        pattern: /^( {0,3}#\s+)(.*?)((?:\s+#+\s*)?)$/,
        replacement: '$2'
      }
    },
    h2: {
      type: 'line',
      className: 'TMH2',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '## $2'
      },
      unset: {
        pattern: /^( {0,3}##\s+)(.*?)((?:\s+#+\s*)?)$/,
        replacement: '$2'
      }
    },
    h3: {
      type: 'line',
      className: 'TMH3',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '### $2'
      },
      unset: {
        pattern: /^( {0,3}###\s+)(.*?)((?:\s+#+\s*)?)$/,
        replacement: '$2'
      }
    },
    h4: {
      type: 'line',
      className: 'TMH4',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '#### $2'
      },
      unset: {
        pattern: /^( {0,3}####\s+)(.*?)((?:\s+#+\s*)?)$/,
        replacement: '$2'
      }
    },
    h5: {
      type: 'line',
      className: 'TMH5',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '##### $2'
      },
      unset: {
        pattern: /^( {0,3}#####\s+)(.*?)((?:\s+#+\s*)?)$/,
        replacement: '$2'
      }
    },
    h6: {
      type: 'line',
      className: 'TMH6',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '###### $2'
      },
      unset: {
        pattern: /^( {0,3}######\s+)(.*?)((?:\s+#+\s*)?)$/,
        replacement: '$2'
      }
    },
    ul: {
      type: 'line',
      className: 'TMUL',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '- $2'
      },
      unset: {
        pattern: /^( {0,3}[+*-] {1,4})(.*)$/,
        replacement: '$2'
      }
    },
    ol: {
      type: 'line',
      className: 'TMOL',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '$#. $2'
      },
      unset: {
        pattern: /^( {0,3}\d{1,9}[.)] {1,4})(.*)$/,
        replacement: '$2'
      }
    },
    blockquote: {
      type: 'line',
      className: 'TMBlockquote',
      set: {
        pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\-*+])\s+)?)(.*)$/,
        replacement: '> $2'
      },
      unset: {
        pattern: /^( {0,3}>[ ]?)(.*)$/,
        replacement: '$2'
      }
    }
  };

  class Editor {
    constructor() {
      let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.e = null;
      this.textarea = null;
      this.lines = [];
      this.lineElements = [];
      this.lineTypes = [];
      this.lineCaptures = [];
      this.lineReplacements = [];
      this.linkLabels = [];
      this.lineDirty = [];
      this.lastCommandState = null;
      this.listeners = {
        change: [],
        selection: [],
        drop: []
      };
      let element = props.element;
      this.textarea = props.textarea;
      if (this.textarea) {
        if (!this.textarea.tagName) {
          this.textarea = document.getElementById(this.textarea);
        }
        if (!element) element = this.textarea;
      }
      if (element && !element.tagName) {
        element = document.getElementById(props.element);
      }
      if (!element) {
        element = document.getElementsByTagName("body")[0];
      }
      if (element.tagName == "TEXTAREA") {
        this.textarea = element;
        element = this.textarea.parentNode;
      }
      if (this.textarea) {
        this.textarea.style.display = "none";
      }
      this.createEditorElement(element, props);
      this.setContent(typeof props.content === "string" ? props.content : this.textarea ? this.textarea.value : "# Hello TinyMDE!\nEdit **here**");
    }

    /**
     * Creates the editor element inside the target element of the DOM tree
     * @param element The target element of the DOM tree
     * @param props options, passed from constructor's props
     */
    createEditorElement(element, props) {
      if (props && props.editor !== undefined) {
        if (props.editor.tagName) this.e = props.editor;else this.e = document.getElementById(props.editor);
      } else this.e = document.createElement("div");
      this.e.classList.add("TinyMDE");
      this.e.contentEditable = true;
      // The following is important for formatting purposes, but also since otherwise the browser replaces subsequent spaces with  &nbsp; &nbsp;
      // That breaks a lot of stuff, so we do this here and not in CSS—therefore, you don't have to remember to put this in the CSS file
      this.e.style.whiteSpace = "pre-wrap";
      // Avoid formatting (B / I / U) popping up on iOS
      this.e.style.webkitUserModify = "read-write-plaintext-only";
      if (props.editor === undefined) {
        if (this.textarea && this.textarea.parentNode == element && this.textarea.nextSibling) {
          element.insertBefore(this.e, this.textarea.nextSibling);
        } else {
          element.appendChild(this.e);
        }
      }
      this.e.addEventListener("input", e => this.handleInputEvent(e));
      this.e.addEventListener("compositionend", e => this.handleInputEvent(e));
      document.addEventListener("selectionchange", e => this.handleSelectionChangeEvent(e));
      this.e.addEventListener("paste", e => this.handlePaste(e));
      this.e.addEventListener("drop", e => this.handleDrop(e));
      this.lineElements = this.e.childNodes; // this will automatically update
    }

    /**
     * Sets the editor content.
     * @param {string} content The new Markdown content
     */
    setContent(content) {
      // Delete any existing content
      while (this.e.firstChild) {
        this.e.removeChild(this.e.firstChild);
      }
      this.lines = content.split(/(?:\r\n|\r|\n)/);
      this.lineDirty = [];
      for (let lineNum = 0; lineNum < this.lines.length; lineNum++) {
        let le = document.createElement("div");
        this.e.appendChild(le);
        this.lineDirty.push(true);
      }
      this.lineTypes = new Array(this.lines.length);
      this.updateFormatting();
      this.fireChange();
    }

    /**
     * Gets the editor content as a Markdown string.
     * @returns {string} The editor content as a markdown string
     */
    getContent() {
      return this.lines.join("\n");
    }

    /**
     * This is the main method to update the formatting (from this.lines to HTML output)
     */
    updateFormatting() {
      // First, parse line types. This will update this.lineTypes, this.lineReplacements, and this.lineCaptures
      // We don't apply the formatting yet
      this.updateLineTypes();
      // Collect any valid link labels from link reference definitions—we need that for formatting to determine what's a valid link
      this.updateLinkLabels();
      // Now, apply the formatting
      this.applyLineTypes();
    }

    /**
     * Updates this.linkLabels: For every link reference definition (line type TMLinkReferenceDefinition), we collect the label
     */
    updateLinkLabels() {
      this.linkLabels = [];
      for (let l = 0; l < this.lines.length; l++) {
        if (this.lineTypes[l] == "TMLinkReferenceDefinition") {
          this.linkLabels.push(this.lineCaptures[l][lineGrammar.TMLinkReferenceDefinition.labelPlaceholder]);
        }
      }
    }

    /**
     * Helper function to replace placeholders from a RegExp capture. The replacement string can contain regular dollar placeholders (e.g., $1),
     * which are interpreted like in String.replace(), but also double dollar placeholders ($$1). In the case of double dollar placeholders,
     * Markdown inline grammar is applied on the content of the captured subgroup, i.e., $$1 processes inline Markdown grammar in the content of the
     * first captured subgroup, and replaces `$$1` with the result.
     *
     * @param {string} replacement The replacement string, including placeholders.
     * @param  capture The result of a RegExp.exec() call
     * @returns The replacement string, with placeholders replaced from the capture result.
     */
    replace(replacement, capture) {
      return replacement.replace(/(\${1,2})([0-9])/g, (str, p1, p2) => {
        if (p1 == "$") return htmlescape(capture[p2]);else return `<span class="TMInlineFormatted">${this.processInlineStyles(capture[p2])}</span>`;
      });
    }

    /**
     * Applies the line types (from this.lineTypes as well as the capture result in this.lineReplacements and this.lineCaptures)
     * and processes inline formatting for all lines.
     */
    applyLineTypes() {
      for (let lineNum = 0; lineNum < this.lines.length; lineNum++) {
        if (this.lineDirty[lineNum]) {
          let contentHTML = this.replace(this.lineReplacements[lineNum], this.lineCaptures[lineNum]);
          // this.lineHTML[lineNum] = (contentHTML == '' ? '<br />' : contentHTML); // Prevent empty elements which can't be selected etc.
          this.lineElements[lineNum].className = this.lineTypes[lineNum];
          this.lineElements[lineNum].removeAttribute("style");
          this.lineElements[lineNum].innerHTML = contentHTML == "" ? "<br />" : contentHTML; // Prevent empty elements which can't be selected etc.
        }

        this.lineElements[lineNum].dataset.lineNum = lineNum;
      }
    }

    /**
     * Determines line types for all lines based on the line / block grammar. Captures the results of the respective line
     * grammar regular expressions.
     * Updates this.lineTypes, this.lineCaptures, and this.lineReplacements, as well as this.lineDirty.
     */
    updateLineTypes() {
      let codeBlockType = false;
      let codeBlockSeqLength = 0;
      let htmlBlock = false;
      for (let lineNum = 0; lineNum < this.lines.length; lineNum++) {
        let lineType = "TMPara";
        let lineCapture = [this.lines[lineNum]];
        let lineReplacement = "$$0"; // Default replacement for paragraph: Inline format the entire line

        // Check ongoing code blocks
        // if (lineNum > 0 && (this.lineTypes[lineNum - 1] == 'TMCodeFenceBacktickOpen' || this.lineTypes[lineNum - 1] == 'TMFencedCodeBacktick')) {
        if (codeBlockType == "TMCodeFenceBacktickOpen") {
          // We're in a backtick-fenced code block, check if the current line closes it
          let capture = lineGrammar.TMCodeFenceBacktickClose.regexp.exec(this.lines[lineNum]);
          if (capture && capture.groups["seq"].length >= codeBlockSeqLength) {
            lineType = "TMCodeFenceBacktickClose";
            lineReplacement = lineGrammar.TMCodeFenceBacktickClose.replacement;
            lineCapture = capture;
            codeBlockType = false;
          } else {
            lineType = "TMFencedCodeBacktick";
            lineReplacement = '<span class="TMFencedCode">$0<br /></span>';
            lineCapture = [this.lines[lineNum]];
          }
        }
        // if (lineNum > 0 && (this.lineTypes[lineNum - 1] == 'TMCodeFenceTildeOpen' || this.lineTypes[lineNum - 1] == 'TMFencedCodeTilde')) {
        else if (codeBlockType == "TMCodeFenceTildeOpen") {
          // We're in a tilde-fenced code block
          let capture = lineGrammar.TMCodeFenceTildeClose.regexp.exec(this.lines[lineNum]);
          if (capture && capture.groups["seq"].length >= codeBlockSeqLength) {
            lineType = "TMCodeFenceTildeClose";
            lineReplacement = lineGrammar.TMCodeFenceTildeClose.replacement;
            lineCapture = capture;
            codeBlockType = false;
          } else {
            lineType = "TMFencedCodeTilde";
            lineReplacement = '<span class="TMFencedCode">$0<br /></span>';
            lineCapture = [this.lines[lineNum]];
          }
        }

        // Check HTML block types
        if (lineType == "TMPara" && htmlBlock === false) {
          for (let htmlBlockType of htmlBlockGrammar) {
            if (this.lines[lineNum].match(htmlBlockType.start)) {
              // Matching start condition. Check if this tag can start here (not all start conditions allow breaking a paragraph).
              if (htmlBlockType.paraInterrupt || lineNum == 0 || !(this.lineTypes[lineNum - 1] == "TMPara" || this.lineTypes[lineNum - 1] == "TMUL" || this.lineTypes[lineNum - 1] == "TMOL" || this.lineTypes[lineNum - 1] == "TMBlockquote")) {
                htmlBlock = htmlBlockType;
                break;
              }
            }
          }
        }
        if (htmlBlock !== false) {
          lineType = "TMHTMLBlock";
          lineReplacement = '<span class="TMHTMLContent">$0<br /></span>'; // No formatting in TMHTMLBlock
          lineCapture = [this.lines[lineNum]]; // This should already be set but better safe than sorry

          // Check if HTML block should be closed
          if (htmlBlock.end) {
            // Specific end condition
            if (this.lines[lineNum].match(htmlBlock.end)) {
              htmlBlock = false;
            }
          } else {
            // No specific end condition, ends with blank line
            if (lineNum == this.lines.length - 1 || this.lines[lineNum + 1].match(lineGrammar.TMBlankLine.regexp)) {
              htmlBlock = false;
            }
          }
        }

        // Check all regexps if we haven't applied one of the code block types
        if (lineType == "TMPara") {
          for (let type in lineGrammar) {
            if (lineGrammar[type].regexp) {
              let capture = lineGrammar[type].regexp.exec(this.lines[lineNum]);
              if (capture) {
                lineType = type;
                lineReplacement = lineGrammar[type].replacement;
                lineCapture = capture;
                break;
              }
            }
          }
        }

        // If we've opened a code block, remember that
        if (lineType == "TMCodeFenceBacktickOpen" || lineType == "TMCodeFenceTildeOpen") {
          codeBlockType = lineType;
          codeBlockSeqLength = lineCapture.groups["seq"].length;
        }

        // Link reference definition and indented code can't interrupt a paragraph
        if ((lineType == "TMIndentedCode" || lineType == "TMLinkReferenceDefinition") && lineNum > 0 && (this.lineTypes[lineNum - 1] == "TMPara" || this.lineTypes[lineNum - 1] == "TMUL" || this.lineTypes[lineNum - 1] == "TMOL" || this.lineTypes[lineNum - 1] == "TMBlockquote")) {
          // Fall back to TMPara
          lineType = "TMPara";
          lineCapture = [this.lines[lineNum]];
          lineReplacement = "$$0";
        }

        // Setext H2 markers that can also be interpreted as an empty list item should be regarded as such (as per CommonMark spec)
        if (lineType == "TMSetextH2Marker") {
          let capture = lineGrammar.TMUL.regexp.exec(this.lines[lineNum]);
          if (capture) {
            lineType = "TMUL";
            lineReplacement = lineGrammar.TMUL.replacement;
            lineCapture = capture;
          }
        }

        // Setext headings are only valid if preceded by a paragraph (and if so, they change the type of the previous paragraph)
        if (lineType == "TMSetextH1Marker" || lineType == "TMSetextH2Marker") {
          if (lineNum == 0 || this.lineTypes[lineNum - 1] != "TMPara") {
            // Setext marker is invalid. However, a H2 marker might still be a valid HR, so let's check that
            let capture = lineGrammar.TMHR.regexp.exec(this.lines[lineNum]);
            if (capture) {
              // Valid HR
              lineType = "TMHR";
              lineCapture = capture;
              lineReplacement = lineGrammar.TMHR.replacement;
            } else {
              // Not valid HR, format as TMPara
              lineType = "TMPara";
              lineCapture = [this.lines[lineNum]];
              lineReplacement = "$$0";
            }
          } else {
            // Valid setext marker. Change types of preceding para lines
            let headingLine = lineNum - 1;
            const headingLineType = lineType == "TMSetextH1Marker" ? "TMSetextH1" : "TMSetextH2";
            do {
              if (this.lineTypes[headingLineType] != headingLineType) {
                this.lineTypes[headingLine] = headingLineType;
                this.lineDirty[headingLineType] = true;
              }
              this.lineReplacements[headingLine] = "$$0";
              this.lineCaptures[headingLine] = [this.lines[headingLine]];
              headingLine--;
            } while (headingLine >= 0 && this.lineTypes[headingLine] == "TMPara");
          }
        }
        // Lastly, save the line style to be applied later
        if (this.lineTypes[lineNum] != lineType) {
          this.lineTypes[lineNum] = lineType;
          this.lineDirty[lineNum] = true;
        }
        this.lineReplacements[lineNum] = lineReplacement;
        this.lineCaptures[lineNum] = lineCapture;
      }
    }

    /**
     * Updates all line contents from the HTML, then re-applies formatting.
     */
    updateLineContentsAndFormatting() {
      this.clearDirtyFlag();
      this.updateLineContents();
      this.updateFormatting();
    }

    /**
     * Attempts to parse a link or image at the current position. This assumes that the opening [ or ![ has already been matched.
     * Returns false if this is not a valid link, image. See below for more information
     * @param {string} originalString The original string, starting at the opening marker ([ or ![)
     * @param {boolean} isImage Whether or not this is an image (opener == ![)
     * @returns false if not a valid link / image.
     * Otherwise returns an object with two properties: output is the string to be included in the processed output,
     * charCount is the number of input characters (from originalString) consumed.
     */
    parseLinkOrImage(originalString, isImage) {
      // Skip the opening bracket
      let textOffset = isImage ? 2 : 1;
      let opener = originalString.substr(0, textOffset);
      let type = isImage ? "TMImage" : "TMLink";
      let currentOffset = textOffset;
      let bracketLevel = 1;
      let linkText = false;
      let linkRef = false;
      let linkLabel = [];
      let linkDetails = []; // If matched, this will be an array: [whitespace + link destination delimiter, link destination, link destination delimiter, whitespace, link title delimiter, link title, link title delimiter + whitespace]. All can be empty strings.

      textOuter: while (currentOffset < originalString.length && linkText === false /* empty string is okay */) {
        let string = originalString.substr(currentOffset);

        // Capture any escapes and code blocks at current position, they bind more strongly than links
        // We don't have to actually process them here, that'll be done later in case the link / image is valid, but we need to skip over them.
        for (let rule of ["escape", "code", "autolink", "html"]) {
          let cap = inlineGrammar[rule].regexp.exec(string);
          if (cap) {
            currentOffset += cap[0].length;
            continue textOuter;
          }
        }

        // Check for image. It's okay for an image to be included in a link or image
        if (string.match(inlineGrammar.imageOpen.regexp)) {
          // Opening image. It's okay if this is a matching pair of brackets
          bracketLevel++;
          currentOffset += 2;
          continue textOuter;
        }

        // Check for link (not an image because that would have been captured and skipped over above)
        if (string.match(inlineGrammar.linkOpen.regexp)) {
          // Opening bracket. Two things to do:
          // 1) it's okay if this part of a pair of brackets.
          // 2) If we are currently trying to parse a link, this nested bracket musn't start a valid link (no nested links allowed)
          bracketLevel++;
          // if (bracketLevel >= 2) return false; // Nested unescaped brackets, this doesn't qualify as a link / image
          if (!isImage) {
            if (this.parseLinkOrImage(string, false)) {
              // Valid link inside this possible link, which makes this link invalid (inner links beat outer ones)
              return false;
            }
          }
          currentOffset += 1;
          continue textOuter;
        }

        // Check for closing bracket
        if (string.match(/^\]/)) {
          bracketLevel--;
          if (bracketLevel == 0) {
            // Found matching bracket and haven't found anything disqualifying this as link / image.
            linkText = originalString.substr(textOffset, currentOffset - textOffset);
            currentOffset++;
            continue textOuter;
          }
        }

        // Nothing matches, proceed to next char
        currentOffset++;
      }

      // Did we find a link text (i.e., find a matching closing bracket?)
      if (linkText === false) return false; // Nope

      // So far, so good. We've got a valid link text. Let's see what type of link this is
      let nextChar = currentOffset < originalString.length ? originalString.substr(currentOffset, 1) : "";

      // REFERENCE LINKS
      if (nextChar == "[") {
        let string = originalString.substr(currentOffset);
        let cap = inlineGrammar.linkLabel.regexp.exec(string);
        if (cap) {
          // Valid link label
          currentOffset += cap[0].length;
          linkLabel.push(cap[1], cap[2], cap[3]);
          if (cap[inlineGrammar.linkLabel.labelPlaceholder]) {
            // Full reference link
            linkRef = cap[inlineGrammar.linkLabel.labelPlaceholder];
          } else {
            // Collapsed reference link
            linkRef = linkText.trim();
          }
        } else {
          // Not a valid link label
          return false;
        }
      } else if (nextChar != "(") {
        // Shortcut ref link
        linkRef = linkText.trim();

        // INLINE LINKS
      } else {
        // nextChar == '('

        // Potential inline link
        currentOffset++;
        let parenthesisLevel = 1;
        inlineOuter: while (currentOffset < originalString.length && parenthesisLevel > 0) {
          let string = originalString.substr(currentOffset);

          // Process whitespace
          let cap = /^\s+/.exec(string);
          if (cap) {
            switch (linkDetails.length) {
              case 0:
                linkDetails.push(cap[0]);
                break;
              // Opening whitespace
              case 1:
                linkDetails.push(cap[0]);
                break;
              // Open destination, but not a destination yet; desination opened with <
              case 2:
                // Open destination with content in it. Whitespace only allowed if opened by angle bracket, otherwise this closes the destination
                if (linkDetails[0].match(/</)) {
                  linkDetails[1] = linkDetails[1].concat(cap[0]);
                } else {
                  if (parenthesisLevel != 1) return false; // Unbalanced parenthesis
                  linkDetails.push(""); // Empty end delimiter for destination
                  linkDetails.push(cap[0]); // Whitespace in between destination and title
                }

                break;
              case 3:
                linkDetails.push(cap[0]);
                break;
              // Whitespace between destination and title
              case 4:
                return false;
              // This should never happen (no opener for title yet, but more whitespace to capture)
              case 5:
                linkDetails.push("");
              // Whitespace at beginning of title, push empty title and continue
              case 6:
                linkDetails[5] = linkDetails[5].concat(cap[0]);
                break;
              // Whitespace in title
              case 7:
                linkDetails[6] = linkDetails[6].concat(cap[0]);
                break;
              // Whitespace after closing delimiter
              default:
                return false;
              // We should never get here
            }

            currentOffset += cap[0].length;
            continue inlineOuter;
          }

          // Process backslash escapes
          cap = inlineGrammar.escape.regexp.exec(string);
          if (cap) {
            switch (linkDetails.length) {
              case 0:
                linkDetails.push("");
              // this opens the link destination, add empty opening delimiter and proceed to next case
              case 1:
                linkDetails.push(cap[0]);
                break;
              // This opens the link destination, append it
              case 2:
                linkDetails[1] = linkDetails[1].concat(cap[0]);
                break;
              // Part of the link destination
              case 3:
                return false;
              // Lacking opening delimiter for link title
              case 4:
                return false;
              // Lcaking opening delimiter for link title
              case 5:
                linkDetails.push("");
              // This opens the link title
              case 6:
                linkDetails[5] = linkDetails[5].concat(cap[0]);
                break;
              // Part of the link title
              default:
                return false;
              // After link title was closed, without closing parenthesis
            }

            currentOffset += cap[0].length;
            continue inlineOuter;
          }

          // Process opening angle bracket as deilimiter of destination
          if (linkDetails.length < 2 && string.match(/^</)) {
            if (linkDetails.length == 0) linkDetails.push("");
            linkDetails[0] = linkDetails[0].concat("<");
            currentOffset++;
            continue inlineOuter;
          }

          // Process closing angle bracket as delimiter of destination
          if ((linkDetails.length == 1 || linkDetails.length == 2) && string.match(/^>/)) {
            if (linkDetails.length == 1) linkDetails.push(""); // Empty link destination
            linkDetails.push(">");
            currentOffset++;
            continue inlineOuter;
          }

          // Process  non-parenthesis delimiter for title.
          cap = /^["']/.exec(string);
          // For this to be a valid opener, we have to either have no destination, only whitespace so far,
          // or a destination with trailing whitespace.
          if (cap && (linkDetails.length == 0 || linkDetails.length == 1 || linkDetails.length == 4)) {
            while (linkDetails.length < 4) linkDetails.push("");
            linkDetails.push(cap[0]);
            currentOffset++;
            continue inlineOuter;
          }

          // For this to be a valid closer, we have to have an opener and some or no title, and this has to match the opener
          if (cap && (linkDetails.length == 5 || linkDetails.length == 6) && linkDetails[4] == cap[0]) {
            if (linkDetails.length == 5) linkDetails.push(""); // Empty link title
            linkDetails.push(cap[0]);
            currentOffset++;
            continue inlineOuter;
          }
          // Other cases (linkDetails.length == 2, 3, 7) will be handled with the "default" case below.

          // Process opening parenthesis
          if (string.match(/^\(/)) {
            switch (linkDetails.length) {
              case 0:
                linkDetails.push("");
              // this opens the link destination, add empty opening delimiter and proceed to next case
              case 1:
                linkDetails.push("");
              // This opens the link destination
              case 2:
                // Part of the link destination
                linkDetails[1] = linkDetails[1].concat("(");
                if (!linkDetails[0].match(/<$/)) parenthesisLevel++;
                break;
              case 3:
                linkDetails.push("");
              //  opening delimiter for link title
              case 4:
                linkDetails.push("(");
                break;
              // opening delimiter for link title
              case 5:
                linkDetails.push("");
              // opens the link title, add empty title content and proceed to next case
              case 6:
                // Part of the link title. Un-escaped parenthesis only allowed in " or ' delimited title
                if (linkDetails[4] == "(") return false;
                linkDetails[5] = linkDetails[5].concat("(");
                break;
              default:
                return false;
              // After link title was closed, without closing parenthesis
            }

            currentOffset++;
            continue inlineOuter;
          }

          // Process closing parenthesis
          if (string.match(/^\)/)) {
            if (linkDetails.length <= 2) {
              // We are inside the link destination. Parentheses have to be matched if not in angle brackets
              while (linkDetails.length < 2) linkDetails.push("");
              if (!linkDetails[0].match(/<$/)) parenthesisLevel--;
              if (parenthesisLevel > 0) {
                linkDetails[1] = linkDetails[1].concat(")");
              }
            } else if (linkDetails.length == 5 || linkDetails.length == 6) {
              // We are inside the link title.
              if (linkDetails[4] == "(") {
                // This closes the link title
                if (linkDetails.length == 5) linkDetails.push("");
                linkDetails.push(")");
              } else {
                // Just regular ol' content
                if (linkDetails.length == 5) linkDetails.push(")");else linkDetails[5] = linkDetails[5].concat(")");
              }
            } else {
              parenthesisLevel--; // This should decrease it from 1 to 0...
            }

            if (parenthesisLevel == 0) {
              // No invalid condition, let's make sure the linkDetails array is complete
              while (linkDetails.length < 7) linkDetails.push("");
            }
            currentOffset++;
            continue inlineOuter;
          }

          // Any old character
          cap = /^./.exec(string);
          if (cap) {
            switch (linkDetails.length) {
              case 0:
                linkDetails.push("");
              // this opens the link destination, add empty opening delimiter and proceed to next case
              case 1:
                linkDetails.push(cap[0]);
                break;
              // This opens the link destination, append it
              case 2:
                linkDetails[1] = linkDetails[1].concat(cap[0]);
                break;
              // Part of the link destination
              case 3:
                return false;
              // Lacking opening delimiter for link title
              case 4:
                return false;
              // Lcaking opening delimiter for link title
              case 5:
                linkDetails.push("");
              // This opens the link title
              case 6:
                linkDetails[5] = linkDetails[5].concat(cap[0]);
                break;
              // Part of the link title
              default:
                return false;
              // After link title was closed, without closing parenthesis
            }

            currentOffset += cap[0].length;
            continue inlineOuter;
          }
          throw "Infinite loop"; // we should never get here since the last test matches any character
        }

        if (parenthesisLevel > 0) return false; // Parenthes(es) not closed
      }

      if (linkRef !== false) {
        // Ref link; check that linkRef is valid
        let valid = false;
        for (let label of this.linkLabels) {
          if (label == linkRef) {
            valid = true;
            break;
          }
        }
        let label = valid ? "TMLinkLabel TMLinkLabel_Valid" : "TMLinkLabel TMLinkLabel_Invalid";
        let output = `<span class="TMMark TMMark_${type}">${opener}</span><span class="${type} ${linkLabel.length < 3 || !linkLabel[1] ? label : ""}">${this.processInlineStyles(linkText)}</span><span class="TMMark TMMark_${type}">]</span>`;
        if (linkLabel.length >= 3) {
          output = output.concat(`<span class="TMMark TMMark_${type}">${linkLabel[0]}</span>`, `<span class="${label}">${linkLabel[1]}</span>`, `<span class="TMMark TMMark_${type}">${linkLabel[2]}</span>`);
        }
        return {
          output: output,
          charCount: currentOffset
        };
      } else if (linkDetails) {
        // Inline link

        // This should never happen, but better safe than sorry.
        while (linkDetails.length < 7) {
          linkDetails.push("");
        }
        return {
          output: `<span class="TMMark TMMark_${type}">${opener}</span><span class="${type}">${this.processInlineStyles(linkText)}</span><span class="TMMark TMMark_${type}">](${linkDetails[0]}</span><span class="${type}Destination">${linkDetails[1]}</span><span class="TMMark TMMark_${type}">${linkDetails[2]}${linkDetails[3]}${linkDetails[4]}</span><span class="${type}Title">${linkDetails[5]}</span><span class="TMMark TMMark_${type}">${linkDetails[6]})</span>`,
          charCount: currentOffset
        };
      }
      return false;
    }

    /**
     * Formats a markdown string as HTML, using Markdown inline formatting.
     * @param {string} originalString The input (markdown inline formatted) string
     * @returns {string} The HTML formatted output
     */
    processInlineStyles(originalString) {
      let processed = "";
      let stack = []; // Stack is an array of objects of the format: {delimiter, delimString, count, output}
      let offset = 0;
      let string = originalString;
      outer: while (string) {
        // Process simple rules (non-delimiter)
        for (let rule of ["escape", "code", "autolink", "html"]) {
          let cap = inlineGrammar[rule].regexp.exec(string);
          if (cap) {
            string = string.substr(cap[0].length);
            offset += cap[0].length;
            processed += inlineGrammar[rule].replacement
            // .replace(/\$\$([1-9])/g, (str, p1) => processInlineStyles(cap[p1])) // todo recursive calling
            .replace(/\$([1-9])/g, (str, p1) => htmlescape(cap[p1]));
            continue outer;
          }
        }

        // Check for links / images
        let potentialLink = string.match(inlineGrammar.linkOpen.regexp);
        let potentialImage = string.match(inlineGrammar.imageOpen.regexp);
        if (potentialImage || potentialLink) {
          let result = this.parseLinkOrImage(string, potentialImage);
          if (result) {
            processed = `${processed}${result.output}`;
            string = string.substr(result.charCount);
            offset += result.charCount;
            continue outer;
          }
        }

        // Check for em / strong delimiters
        let cap = /(^\*+)|(^_+)/.exec(string);
        if (cap) {
          let delimCount = cap[0].length;
          const delimString = cap[0];
          const currentDelimiter = cap[0][0]; // This should be * or _

          string = string.substr(cap[0].length);

          // We have a delimiter run. Let's check if it can open or close an emphasis.

          const preceding = offset > 0 ? originalString.substr(0, offset) : " "; // beginning and end of line count as whitespace
          const following = offset + cap[0].length < originalString.length ? string : " ";
          const punctuationFollows = following.match(punctuationLeading);
          const punctuationPrecedes = preceding.match(punctuationTrailing);
          const whitespaceFollows = following.match(/^\s/);
          const whitespacePrecedes = preceding.match(/\s$/);

          // These are the rules for right-flanking and left-flanking delimiter runs as per CommonMark spec
          let canOpen = !whitespaceFollows && (!punctuationFollows || !!whitespacePrecedes || !!punctuationPrecedes);
          let canClose = !whitespacePrecedes && (!punctuationPrecedes || !!whitespaceFollows || !!punctuationFollows);

          // Underscores have more detailed rules than just being part of left- or right-flanking run:
          if (currentDelimiter == "_" && canOpen && canClose) {
            canOpen = punctuationPrecedes;
            canClose = punctuationFollows;
          }

          // If the delimiter can close, check the stack if there's something it can close
          if (canClose) {
            let stackPointer = stack.length - 1;
            // See if we can find a matching opening delimiter, move down through the stack
            while (delimCount && stackPointer >= 0) {
              if (stack[stackPointer].delimiter == currentDelimiter) {
                // We found a matching delimiter, let's construct the formatted string

                // Firstly, if we skipped any stack levels, pop them immediately (non-matching delimiters)
                while (stackPointer < stack.length - 1) {
                  const entry = stack.pop();
                  processed = `${entry.output}${entry.delimString.substr(0, entry.count)}${processed}`;
                }

                // Then, format the string
                if (delimCount >= 2 && stack[stackPointer].count >= 2) {
                  // Strong
                  processed = `<span class="TMMark">${currentDelimiter}${currentDelimiter}</span><strong class="TMStrong">${processed}</strong><span class="TMMark">${currentDelimiter}${currentDelimiter}</span>`;
                  delimCount -= 2;
                  stack[stackPointer].count -= 2;
                } else {
                  // Em
                  processed = `<span class="TMMark">${currentDelimiter}</span><em class="TMEm">${processed}</em><span class="TMMark">${currentDelimiter}</span>`;
                  delimCount -= 1;
                  stack[stackPointer].count -= 1;
                }

                // If that stack level is empty now, pop it
                if (stack[stackPointer].count == 0) {
                  let entry = stack.pop();
                  processed = `${entry.output}${processed}`;
                  stackPointer--;
                }
              } else {
                // This stack level's delimiter type doesn't match the current delimiter type
                // Go down one level in the stack
                stackPointer--;
              }
            }
          }
          // If there are still delimiters left, and the delimiter run can open, push it on the stack
          if (delimCount && canOpen) {
            stack.push({
              delimiter: currentDelimiter,
              delimString: delimString,
              count: delimCount,
              output: processed
            });
            processed = ""; // Current formatted output has been pushed on the stack and will be prepended when the stack gets popped
            delimCount = 0;
          }

          // Any delimiters that are left (closing unmatched) are appended to the output.
          if (delimCount) {
            processed = `${processed}${delimString.substr(0, delimCount)}`;
          }
          offset += cap[0].length;
          continue outer;
        }

        // Check for strikethrough delimiter
        cap = /^~~/.exec(string);
        if (cap) {
          let consumed = false;
          let stackPointer = stack.length - 1;
          // See if we can find a matching opening delimiter, move down through the stack
          while (!consumed && stackPointer >= 0) {
            if (stack[stackPointer].delimiter == "~") {
              // We found a matching delimiter, let's construct the formatted string

              // Firstly, if we skipped any stack levels, pop them immediately (non-matching delimiters)
              while (stackPointer < stack.length - 1) {
                const entry = stack.pop();
                processed = `${entry.output}${entry.delimString.substr(0, entry.count)}${processed}`;
              }

              // Then, format the string
              processed = `<span class="TMMark">~~</span><del class="TMStrikethrough">${processed}</del><span class="TMMark">~~</span>`;
              let entry = stack.pop();
              processed = `${entry.output}${processed}`;
              consumed = true;
            } else {
              // This stack level's delimiter type doesn't match the current delimiter type
              // Go down one level in the stack
              stackPointer--;
            }
          }

          // If there are still delimiters left, and the delimiter run can open, push it on the stack
          if (!consumed) {
            stack.push({
              delimiter: "~",
              delimString: "~~",
              count: 2,
              output: processed
            });
            processed = ""; // Current formatted output has been pushed on the stack and will be prepended when the stack gets popped
          }

          offset += cap[0].length;
          string = string.substr(cap[0].length);
          continue outer;
        }

        // Process 'default' rule
        cap = inlineGrammar.default.regexp.exec(string);
        if (cap) {
          string = string.substr(cap[0].length);
          offset += cap[0].length;
          processed += inlineGrammar.default.replacement.replace(/\$([1-9])/g, (str, p1) => htmlescape(cap[p1]));
          continue outer;
        }
        throw "Infinite loop!";
      }

      // Empty the stack, any opening delimiters are unused
      while (stack.length) {
        const entry = stack.pop();
        processed = `${entry.output}${entry.delimString.substr(0, entry.count)}${processed}`;
      }
      return processed;
    }

    /**
     * Clears the line dirty flag (resets it to an array of false)
     */
    clearDirtyFlag() {
      this.lineDirty = new Array(this.lines.length);
      for (let i = 0; i < this.lineDirty.length; i++) {
        this.lineDirty[i] = false;
      }
    }

    /**
     * Updates the class properties (lines, lineElements) from the DOM.
     * @returns true if contents changed
     */
    updateLineContents() {
      // this.lineDirty = [];
      // Check if we have changed anything about the number of lines (inserted or deleted a paragraph)
      // < 0 means line(s) removed; > 0 means line(s) added
      let lineDelta = this.e.childElementCount - this.lines.length;
      if (lineDelta) {
        // yup. Let's try how much we can salvage (find out which lines from beginning and end were unchanged)
        // Find lines from the beginning that haven't changed...
        let firstChangedLine = 0;
        while (firstChangedLine <= this.lines.length && firstChangedLine <= this.lineElements.length && this.lineElements[firstChangedLine] &&
        // Check that the line element hasn't been deleted
        this.lines[firstChangedLine] == this.lineElements[firstChangedLine].textContent && this.lineTypes[firstChangedLine] == this.lineElements[firstChangedLine].className) {
          firstChangedLine++;
        }

        // End also from the end
        let lastChangedLine = -1;
        while (-lastChangedLine < this.lines.length && -lastChangedLine < this.lineElements.length && this.lines[this.lines.length + lastChangedLine] == this.lineElements[this.lineElements.length + lastChangedLine].textContent && this.lineTypes[this.lines.length + lastChangedLine] == this.lineElements[this.lineElements.length + lastChangedLine].className) {
          lastChangedLine--;
        }
        let linesToDelete = this.lines.length + lastChangedLine + 1 - firstChangedLine;
        if (linesToDelete < -lineDelta) linesToDelete = -lineDelta;
        if (linesToDelete < 0) linesToDelete = 0;
        let linesToAdd = [];
        for (let l = 0; l < linesToDelete + lineDelta; l++) {
          linesToAdd.push(this.lineElements[firstChangedLine + l].textContent);
        }
        this.spliceLines(firstChangedLine, linesToDelete, linesToAdd, false);
      } else {
        // No lines added or removed
        for (let line = 0; line < this.lineElements.length; line++) {
          let e = this.lineElements[line];
          let ct = e.textContent;
          if (this.lines[line] !== ct || this.lineTypes[line] !== e.className) {
            // Line changed, update it
            this.lines[line] = ct;
            this.lineTypes[line] = e.className;
            this.lineDirty[line] = true;
          }
        }
      }
    }

    /**
     * Processes a new paragraph.
     * @param sel The current selection
     */
    processNewParagraph(sel) {
      if (!sel) return;

      // Update lines from content
      this.updateLineContents();
      let continuableType = false;
      // Let's see if we need to continue a list

      let checkLine = sel.col > 0 ? sel.row : sel.row - 1;
      switch (this.lineTypes[checkLine]) {
        case "TMUL":
          continuableType = "TMUL";
          break;
        case "TMOL":
          continuableType = "TMOL";
          break;
        case "TMIndentedCode":
          continuableType = "TMIndentedCode";
          break;
      }
      let lines = this.lines[sel.row].replace(/\n\n$/, "\n").split(/(?:\r\n|\n|\r)/);
      if (lines.length > 1) {
        // New line
        this.spliceLines(sel.row, 1, lines, true);
        sel.row++;
        sel.col = 0;
      }
      if (continuableType) {
        // Check if the previous line was non-empty
        let capture = lineGrammar[continuableType].regexp.exec(this.lines[sel.row - 1]);
        if (capture) {
          // Convention: capture[1] is the line type marker, capture[2] is the content
          if (capture[2]) {
            // Previous line has content, continue the continuable type

            // Hack for OL: increment number
            if (continuableType == "TMOL") {
              capture[1] = capture[1].replace(/\d{1,9}/, result => {
                return parseInt(result[0]) + 1;
              });
            }
            this.lines[sel.row] = `${capture[1]}${this.lines[sel.row]}`;
            this.lineDirty[sel.row] = true;
            sel.col = capture[1].length;
          } else {
            // Previous line has no content, remove the continuable type from the previous row
            this.lines[sel.row - 1] = "";
            this.lineDirty[sel.row - 1] = true;
          }
        }
      }
      this.updateFormatting();
    }

    // /**
    //  * Processes a "delete" input action.
    //  * @param {object} focus The selection
    //  * @param {boolean} forward If true, performs a forward delete, otherwise performs a backward delete
    //  */
    // processDelete(focus, forward) {
    //   if (!focus) return;
    //   let anchor = this.getSelection(true);
    //   // Do we have a non-empty selection?
    //   if (focus.col != anchor.col || focus.row != anchor.row) {
    //     // non-empty. direction doesn't matter.
    //     this.paste('', anchor, focus);
    //   } else {
    //     if (forward) {
    //       if (focus.col < this.lines[focus.row].length) this.paste('', {row: focus.row, col: focus.col + 1}, focus);
    //       else if (focus.col < this.lines.length) this.paste('', {row: focus.row + 1, col: 0}, focus);
    //       // Otherwise, we're at the very end and can't delete forward
    //     } else {
    //       if (focus.col > 0) this.paste('', {row: focus.row, col: focus.col - 1}, focus);
    //       else if (focus.row > 0) this.paste('', {row: focus.row - 1, col: this.lines[focus.row - 1].length - 1}, focus);
    //       // Otherwise, we're at the very beginning and can't delete backwards
    //     }
    //   }

    // }

    /**
     * Gets the current position of the selection counted by row and column of the editor Markdown content (as opposed to the position in the DOM).
     *
     * @param {boolean} getAnchor if set to true, gets the selection anchor (start point of the selection), otherwise gets the focus (end point).
     * @return {object} An object representing the selection, with properties col and row.
     */
    getSelection() {
      let getAnchor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      const selection = window.getSelection();
      let startNode = getAnchor ? selection.anchorNode : selection.focusNode;
      if (!startNode) return null;
      let offset = getAnchor ? selection.anchorOffset : selection.focusOffset;
      if (startNode == this.e) {
        if (offset < this.lines.length) return {
          row: offset,
          col: 0
        };
        return {
          row: offset - 1,
          col: this.lines[offset - 1].length
        };
      }
      let col = this.computeColumn(startNode, offset);
      if (col === null) return null; // We are outside of the editor

      // Find the row node
      let node = startNode;
      while (node.parentElement != this.e) {
        node = node.parentElement;
      }
      let row = 0;
      // Check if we can read a line number from the data-line-num attribute.
      // The last condition is a security measure since inserting a new paragraph copies the previous rows' line number
      if (node.dataset && node.dataset.lineNum && (!node.previousSibling || node.previousSibling.dataset.lineNum != node.dataset.lineNum)) {
        row = parseInt(node.dataset.lineNum);
      } else {
        while (node.previousSibling) {
          row++;
          node = node.previousSibling;
        }
      }
      return {
        row: row,
        col: col,
        node: startNode
      };
    }

    /**
     * Computes a column within an editor line from a node and offset within that node.
     * @param {Node} startNode The node
     * @param {int} offset THe selection
     * @returns {int} the column, or null if the node is not inside the editor
     */
    computeColumn(startNode, offset) {
      let node = startNode;
      let col;
      // First, make sure we're actually in the editor.
      while (node && node.parentNode != this.e) {
        node = node.parentNode;
      }
      if (node == null) return null;

      // There are two ways that offset can be defined:
      // - Either, the node is a text node, in which case it is the offset within the text
      // - Or, the node is an element with child notes, in which case the offset refers to the
      //   child node after which the selection is located
      if (startNode.nodeType === Node.TEXT_NODE || offset === 0) {
        // In the case that the node is non-text node but the offset is 0,
        // The selection is at the beginning of that element so we
        // can simply use the same approach as if it were at the beginning
        // of a text node.
        col = offset;
        node = startNode;
      } else if (offset > 0) {
        node = startNode.childNodes[offset - 1];
        col = node.textContent.length;
      }
      while (node.parentNode != this.e) {
        if (node.previousSibling) {
          node = node.previousSibling;
          col += node.textContent.length;
        } else {
          node = node.parentNode;
        }
      }
      return col;
    }

    /**
     * Computes DOM node and offset within that node from a position expressed as row and column.
     * @param {int} row Row (line number)
     * @param {int} col Column
     * @returns An object with two properties: node and offset. offset may be null;
     */
    computeNodeAndOffset(row, col) {
      let bindRight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (row >= this.lineElements.length) {
        // Selection past the end of text, set selection to end of text
        row = this.lineElements.length - 1;
        col = this.lines[row].length;
      }
      if (col > this.lines[row].length) {
        col = this.lines[row].length;
      }
      const parentNode = this.lineElements[row];
      let node = parentNode.firstChild;
      let childrenComplete = false;
      // default return value
      let rv = {
        node: parentNode.firstChild ? parentNode.firstChild : parentNode,
        offset: 0
      };
      while (node != parentNode) {
        if (!childrenComplete && node.nodeType === Node.TEXT_NODE) {
          if (node.nodeValue.length >= col) {
            if (bindRight && node.nodeValue.length == col) {
              // Selection is at the end of this text node, but we are binding right (prefer an offset of 0 in the next text node)
              // Remember return value in case we don't find another text node
              rv = {
                node: node,
                offset: col
              };
              col = 0;
            } else {
              return {
                node: node,
                offset: col
              };
            }
          } else {
            col -= node.nodeValue.length;
          }
        }
        if (!childrenComplete && node.firstChild) {
          node = node.firstChild;
        } else if (node.nextSibling) {
          childrenComplete = false;
          node = node.nextSibling;
        } else {
          childrenComplete = true;
          node = node.parentNode;
        }
      }

      // Either, the position was invalid and we just return the default return value
      // Or we are binding right and the selection is at the end of the line
      return rv;
    }

    /**
     * Sets the selection based on rows and columns within the editor Markdown content.
     * @param {object} focus Object representing the selection, needs to have properties row and col.
     * @param anchor Anchor of the selection. If not given, assumes the current anchor.
     */
    setSelection(focus) {
      let anchor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (!focus) return;
      let range = document.createRange();
      let {
        node: focusNode,
        offset: focusOffset
      } = this.computeNodeAndOffset(focus.row, focus.col, anchor && anchor.row == focus.row && anchor.col > focus.col); // Bind selection right if anchor is in the same row and behind the focus
      let anchorNode = null,
        anchorOffset = null;
      if (anchor && (anchor.row != focus.row || anchor.col != focus.col)) {
        let {
          node,
          offset
        } = this.computeNodeAndOffset(anchor.row, anchor.col, focus.row == anchor.row && focus.col > anchor.col);
        anchorNode = node;
        anchorOffset = offset;
      }
      if (anchorNode) range.setStart(anchorNode, anchorOffset);else range.setStart(focusNode, focusOffset);
      range.setEnd(focusNode, focusOffset);
      let windowSelection = window.getSelection();
      windowSelection.removeAllRanges();
      windowSelection.addRange(range);
    }

    /**
     * Event handler for input events
     */
    handleInputEvent(event) {
      // For composition input, we are only updating the text after we have received
      // a compositionend event, so we return upon insertCompositionText.
      // Otherwise, the DOM changes break the text input.
      if (event.inputType == "insertCompositionText") return;
      let focus = this.getSelection();
      if ((event.inputType == "insertParagraph" || event.inputType == "insertLineBreak") && focus) {
        this.clearDirtyFlag();
        this.processNewParagraph(focus);
      } else {
        if (!this.e.firstChild) {
          this.e.innerHTML = '<div class="TMBlankLine"><br></div>';
        } else {
          this.fixNodeHierarchy();
        }
        this.updateLineContentsAndFormatting();
      }
      if (focus) {
        this.setSelection(focus);
      }
      this.fireChange();
    }

    /**
     * Fixes the node hierarchy – makes sure that each line is in a div, and there are no nested divs
     */
    fixNodeHierarchy() {
      const originalChildren = Array.from(this.e.childNodes);
      const replaceChild = function (child) {
        const parent = child.parentElement;
        const nextSibling = child.nextSibling;
        parent.removeChild(child);
        for (var _len = arguments.length, newChildren = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          newChildren[_key - 1] = arguments[_key];
        }
        newChildren.forEach(newChild => nextSibling ? parent.insertBefore(newChild, nextSibling) : parent.appendChild(newChild));
      };
      originalChildren.forEach(child => {
        if (child.nodeType !== Node.ELEMENT_NODE || child.tagName !== "DIV") {
          // Found a child node that's either not an element or not a div. Wrap it in a div.
          const divWrapper = document.createElement("div");
          replaceChild(child, divWrapper);
          divWrapper.appendChild(child);
        } else if (child.childNodes.length == 0) {
          // Empty div child node, include at least a <br />
          child.appendChild(document.createElement("br"));
        } else {
          const grandChildren = Array.from(child.childNodes);
          if (grandChildren.some(grandChild => grandChild.nodeType === Node.ELEMENT_NODE && grandChild.tagName === "DIV")) {
            return replaceChild(child, grandChildren);
          }
        }
      });
    }

    /**
     * Event handler for the "drop" event
     */
    handleDrop(event) {
      event.preventDefault();
      this.fireDrop(event.dataTransfer);
    }

    /**
     * Event handler for "selectionchange" events.
     */
    handleSelectionChangeEvent() {
      this.fireSelection();
    }

    /**
     * Convenience function to "splice" new lines into the arrays this.lines, this.lineDirty, this.lineTypes, and the DOM elements
     * underneath the editor element.
     * This method is essentially Array.splice, only that the third parameter takes an un-spread array (and the forth parameter)
     * determines whether the DOM should also be adjusted.
     *
     * @param {int} startLine Position at which to start changing the array of lines
     * @param {int} linesToDelete Number of lines to delete
     * @param {array} linesToInsert Array of strings representing the lines to be inserted
     * @param {boolean} adjustLineElements If true, then <div> elements are also inserted in the DOM at the respective position
     */
    spliceLines(startLine) {
      let linesToDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let linesToInsert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      let adjustLineElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      if (adjustLineElements) {
        for (let i = 0; i < linesToDelete; i++) {
          this.e.removeChild(this.e.childNodes[startLine]);
        }
      }
      let insertedBlank = [];
      let insertedDirty = [];
      for (let i = 0; i < linesToInsert.length; i++) {
        insertedBlank.push("");
        insertedDirty.push(true);
        if (adjustLineElements) {
          if (this.e.childNodes[startLine]) this.e.insertBefore(document.createElement("div"), this.e.childNodes[startLine]);else this.e.appendChild(document.createElement("div"));
        }
      }
      this.lines.splice(startLine, linesToDelete, ...linesToInsert);
      this.lineTypes.splice(startLine, linesToDelete, ...insertedBlank);
      this.lineDirty.splice(startLine, linesToDelete, ...insertedDirty);
    }

    /**
     * Event handler for the "paste" event
     */
    handlePaste(event) {
      event.preventDefault();

      // get text representation of clipboard
      let text = (event.originalEvent || event).clipboardData.getData("text/plain");

      // insert text manually
      this.paste(text);
    }

    /**
     * Pastes the text at the current selection (or at the end, if no current selection)
     * @param {string} text
     */
    paste(text) {
      let anchor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      let focus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (!anchor) anchor = this.getSelection(true);
      if (!focus) focus = this.getSelection(false);
      let beginning, end;
      if (!focus) {
        focus = {
          row: this.lines.length - 1,
          col: this.lines[this.lines.length - 1].length
        }; // Insert at end
      }

      if (!anchor) {
        anchor = focus;
      }
      if (anchor.row < focus.row || anchor.row == focus.row && anchor.col <= focus.col) {
        beginning = anchor;
        end = focus;
      } else {
        beginning = focus;
        end = anchor;
      }
      let insertedLines = text.split(/(?:\r\n|\r|\n)/);
      let lineBefore = this.lines[beginning.row].substr(0, beginning.col);
      let lineEnd = this.lines[end.row].substr(end.col);
      insertedLines[0] = lineBefore.concat(insertedLines[0]);
      let endColPos = insertedLines[insertedLines.length - 1].length;
      insertedLines[insertedLines.length - 1] = insertedLines[insertedLines.length - 1].concat(lineEnd);
      this.spliceLines(beginning.row, 1 + end.row - beginning.row, insertedLines);
      focus.row = beginning.row + insertedLines.length - 1;
      focus.col = endColPos;
      this.updateFormatting();
      this.setSelection(focus);
      this.fireChange();
    }

    /**
     * Computes the (lowest in the DOM tree) common ancestor of two DOM nodes.
     * @param {Node} node1 the first node
     * @param {Node} node2 the second node
     * @returns {Node} The commen ancestor node, or null if there is no common ancestor
     */
    computeCommonAncestor(node1, node2) {
      if (!node1 || !node2) return null;
      if (node1 == node2) return node1;
      const ancestry = node => {
        let ancestry = [];
        while (node) {
          ancestry.unshift(node);
          node = node.parentNode;
        }
        return ancestry;
      };
      const ancestry1 = ancestry(node1);
      const ancestry2 = ancestry(node2);
      if (ancestry1[0] != ancestry2[0]) return null;
      let i;
      for (i = 0; ancestry1[i] == ancestry2[i]; i++);
      return ancestry1[i - 1];
    }

    /**
     * Finds the (lowest in the DOM tree) enclosing DOM node with a given class.
     * @param {object} focus The focus selection object
     * @param {object} anchor The anchor selection object
     * @param {string} className The class name to find
     * @returns {Node} The enclosing DOM node with the respective class (inside the editor), if there is one; null otherwise.
     */
    computeEnclosingMarkupNode(focus, anchor, className) {
      let node = null;
      if (!focus) return null;
      if (!anchor) {
        node = focus.node;
      } else {
        if (focus.row != anchor.row) return null;
        node = this.computeCommonAncestor(focus.node, anchor.node);
      }
      if (!node) return null;
      while (node != this.e) {
        if (node.className && node.className.includes(className)) return node;
        node = node.parentNode;
      }
      // Ascended all the way to the editor element
      return null;
    }

    /**
     * Returns the state (true / false) of all commands.
     * @param focus Focus of the selection. If not given, assumes the current focus.
     * @param anchor Anchor of the selection. If not given, assumes the current anchor.
     */
    getCommandState() {
      let focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      let anchor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      let commandState = {};
      if (!focus) focus = this.getSelection(false);
      if (!anchor) anchor = this.getSelection(true);
      if (!focus) {
        for (let cmd in commands) {
          commandState[cmd] = null;
        }
        return commandState;
      }
      if (!anchor) anchor = focus;
      let start, end;
      if (anchor.row < focus.row || anchor.row == focus.row && anchor.col < focus.col) {
        start = anchor;
        end = focus;
      } else {
        start = focus;
        end = anchor;
      }
      if (end.row > start.row && end.col == 0) {
        end.row--;
        end.col = this.lines[end.row].length; // Selection to beginning of next line is said to end at the beginning of the last line
      }

      for (let cmd in commands) {
        if (commands[cmd].type == "inline") {
          if (!focus || focus.row != anchor.row || !this.isInlineFormattingAllowed(focus, anchor)) {
            commandState[cmd] = null;
          } else {
            // The command state is true if there is a respective enclosing markup node (e.g., the selection is enclosed in a <b>..</b>) ...
            commandState[cmd] = !!this.computeEnclosingMarkupNode(focus, anchor, commands[cmd].className) ||
            // ... or if it's an empty string preceded by and followed by formatting markers, e.g. **|** where | is the cursor
            focus.col == anchor.col && !!this.lines[focus.row].substr(0, focus.col).match(commands[cmd].unset.prePattern) && !!this.lines[focus.row].substr(focus.col).match(commands[cmd].unset.postPattern);
          }
        }
        if (commands[cmd].type == "line") {
          if (!focus) {
            commandState[cmd] = null;
          } else {
            let state = this.lineTypes[start.row] == commands[cmd].className;
            for (let line = start.row; line <= end.row; line++) {
              if (this.lineTypes[line] == commands[cmd].className != state) {
                state = null;
                break;
              }
            }
            commandState[cmd] = state;
          }
        }
      }
      return commandState;
    }

    /**
     * Sets a command state
     * @param {string} command
     * @param {boolean} state
     */
    setCommandState(command, state) {
      if (commands[command].type == "inline") {
        let anchor = this.getSelection(true);
        let focus = this.getSelection(false);
        if (!anchor) anchor = focus;
        if (!anchor) return;
        if (anchor.row != focus.row) return;
        if (!this.isInlineFormattingAllowed(focus, anchor)) return;
        let markupNode = this.computeEnclosingMarkupNode(focus, anchor, commands[command].className);
        this.clearDirtyFlag();

        // First case: There's an enclosing markup node, remove the markers around that markup node
        if (markupNode) {
          this.lineDirty[focus.row] = true;
          const startCol = this.computeColumn(markupNode, 0);
          const len = markupNode.textContent.length;
          const left = this.lines[focus.row].substr(0, startCol).replace(commands[command].unset.prePattern, "");
          const mid = this.lines[focus.row].substr(startCol, len);
          const right = this.lines[focus.row].substr(startCol + len).replace(commands[command].unset.postPattern, "");
          this.lines[focus.row] = left.concat(mid, right);
          anchor.col = left.length;
          focus.col = anchor.col + len;
          this.updateFormatting();
          this.setSelection(focus, anchor);
          this.fireChange();

          // Second case: Empty selection with surrounding formatting markers, remove those
        } else if (focus.col == anchor.col && !!this.lines[focus.row].substr(0, focus.col).match(commands[command].unset.prePattern) && !!this.lines[focus.row].substr(focus.col).match(commands[command].unset.postPattern)) {
          this.lineDirty[focus.row] = true;
          const left = this.lines[focus.row].substr(0, focus.col).replace(commands[command].unset.prePattern, "");
          const right = this.lines[focus.row].substr(focus.col).replace(commands[command].unset.postPattern, "");
          this.lines[focus.row] = left.concat(right);
          focus.col = anchor.col = left.length;
          this.updateFormatting();
          this.setSelection(focus, anchor);
          this.fireChange();

          // Not currently formatted, insert formatting markers
        } else {
          // Trim any spaces from the selection
          let {
            startCol,
            endCol
          } = focus.col < anchor.col ? {
            startCol: focus.col,
            endCol: anchor.col
          } : {
            startCol: anchor.col,
            endCol: focus.col
          };
          let match = this.lines[focus.row].substr(startCol, endCol - startCol).match(/^(?<leading>\s*).*\S(?<trailing>\s*)$/);
          if (match) {
            startCol += match.groups.leading.length;
            endCol -= match.groups.trailing.length;
          }
          focus.col = startCol;
          anchor.col = endCol;

          // Just insert markup before and after and hope for the best.
          this.wrapSelection(commands[command].set.pre, commands[command].set.post, focus, anchor);
          this.fireChange();
          // TODO clean this up so that markup remains properly nested
        }
      } else if (commands[command].type == "line") {
        let anchor = this.getSelection(true);
        let focus = this.getSelection(false);
        if (!anchor) anchor = focus;
        if (!focus) return;
        this.clearDirtyFlag();
        let start = anchor.row > focus.row ? focus : anchor;
        let end = anchor.row > focus.row ? anchor : focus;
        if (end.row > start.row && end.col == 0) {
          end.row--;
        }
        for (let line = start.row; line <= end.row; line++) {
          if (state && this.lineTypes[line] != commands[command].className) {
            this.lines[line] = this.lines[line].replace(commands[command].set.pattern, commands[command].set.replacement.replace("$#", line - start.row + 1));
            this.lineDirty[line] = true;
          }
          if (!state && this.lineTypes[line] == commands[command].className) {
            this.lines[line] = this.lines[line].replace(commands[command].unset.pattern, commands[command].unset.replacement);
            this.lineDirty[line] = true;
          }
        }
        this.updateFormatting();
        this.setSelection({
          row: end.row,
          col: this.lines[end.row].length
        }, {
          row: start.row,
          col: 0
        });
        this.fireChange();
      }
    }

    /**
     * Returns whether or not inline formatting is allowed at the current focus
     * @param {object} focus The current focus
     */
    isInlineFormattingAllowed() {
      // TODO Remove parameters from all calls
      const sel = window.getSelection();
      if (!sel || !sel.focusNode || !sel.anchorNode) return false;

      // Check if we can find a common ancestor with the class `TMInlineFormatted`

      // Special case: Empty selection right before `TMInlineFormatted`
      if (sel.isCollapsed && sel.focusNode.nodeType == 3 && sel.focusOffset == sel.focusNode.nodeValue.length) {
        let node;
        for (node = sel.focusNode; node && node.nextSibling == null; node = node.parentNode);
        if (node && node.nextSibling.className && node.nextSibling.className.includes("TMInlineFormatted")) return true;
      }

      // Look for a common ancestor
      let ancestor = this.computeCommonAncestor(sel.focusNode, sel.anchorNode);
      if (!ancestor) return false;

      // Check if there's an ancestor of class 'TMInlineFormatted' or 'TMBlankLine'
      while (ancestor && ancestor != this.e) {
        if (ancestor.className && typeof ancestor.className.includes == "function" && (ancestor.className.includes("TMInlineFormatted") || ancestor.className.includes("TMBlankLine"))) return true;
        ancestor = ancestor.parentNode;
      }
      return false;
    }

    /**
     * Wraps the current selection in the strings pre and post. If the selection is not on one line, returns.
     * @param {string} pre The string to insert before the selection.
     * @param {string} post The string to insert after the selection.
     * @param {object} focus The current selection focus. If null, selection will be computed.
     * @param {object} anchor The current selection focus. If null, selection will be computed.
     */
    wrapSelection(pre, post) {
      let focus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      let anchor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      if (!focus) focus = this.getSelection(false);
      if (!anchor) anchor = this.getSelection(true);
      if (!focus || !anchor || focus.row != anchor.row) return;
      this.lineDirty[focus.row] = true;
      const startCol = focus.col < anchor.col ? focus.col : anchor.col;
      const endCol = focus.col < anchor.col ? anchor.col : focus.col;
      const left = this.lines[focus.row].substr(0, startCol).concat(pre);
      const mid = endCol == startCol ? "" : this.lines[focus.row].substr(startCol, endCol - startCol);
      const right = post.concat(this.lines[focus.row].substr(endCol));
      this.lines[focus.row] = left.concat(mid, right);
      anchor.col = left.length;
      focus.col = anchor.col + mid.length;
      this.updateFormatting();
      this.setSelection(focus, anchor);
    }

    /**
     * Toggles the command state for a command (true <-> false)
     * @param {string} command The editor command
     */
    toggleCommandState(command) {
      if (!this.lastCommandState) this.lastCommandState = this.getCommandState();
      this.setCommandState(command, !this.lastCommandState[command]);
    }

    /**
     * Fires a change event. Updates the linked textarea and notifies any event listeners.
     */
    fireChange() {
      if (!this.textarea && !this.listeners.change.length) return;
      const content = this.getContent();
      if (this.textarea) this.textarea.value = content;
      for (let listener of this.listeners.change) {
        listener({
          content: content,
          linesDirty: this.linesDirty
        });
      }
    }

    /**
     * Fires a "selection changed" event.
     */
    fireSelection() {
      if (this.listeners.selection && this.listeners.selection.length) {
        let focus = this.getSelection(false);
        let anchor = this.getSelection(true);
        let commandState = this.getCommandState(focus, anchor);
        if (this.lastCommandState) {
          Object.assign(this.lastCommandState, commandState);
        } else {
          this.lastCommandState = Object.assign({}, commandState);
        }
        for (let listener of this.listeners.selection) {
          listener({
            focus: focus,
            anchor: anchor,
            commandState: this.lastCommandState
          });
        }
      }
    }

    /**
     * Fires a drop event.
     */
    fireDrop(dataTransfer) {
      for (let listener of this.listeners.drop) {
        listener({
          dataTransfer
        });
      }
    }

    /**
     * Adds an event listener.
     * @param {string} type The type of event to listen to. Can be 'change', 'selection' or 'drop'.
     * @param {*} listener Function of the type (event) => {} to be called when the event occurs.
     */
    addEventListener(type, listener) {
      if (type.match(/^(?:change|input)$/i)) {
        this.listeners.change.push(listener);
      }
      if (type.match(/^(?:selection|selectionchange)$/i)) {
        this.listeners.selection.push(listener);
      }
      if (type.match(/^(?:drop)$/i)) {
        this.listeners.drop.push(listener);
      }
    }
  }

  exports.CommandBar = CommandBar;
  exports.Editor = Editor;

}));
//# sourceMappingURL=index.js.map

//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"file":"index.js","sources":["src/svg/svg.js","src/TinyMDECommandBar.js","node_modules/core-js/internals/global.js","node_modules/core-js/internals/fails.js","node_modules/core-js/internals/descriptors.js","node_modules/core-js/internals/function-bind-native.js","node_modules/core-js/internals/function-uncurry-this.js","node_modules/core-js/internals/document-all.js","node_modules/core-js/internals/is-callable.js","node_modules/core-js/internals/is-null-or-undefined.js","node_modules/core-js/internals/require-object-coercible.js","node_modules/core-js/internals/to-object.js","node_modules/core-js/internals/has-own-property.js","node_modules/core-js/internals/function-name.js","node_modules/core-js/internals/define-global-property.js","node_modules/core-js/internals/shared-store.js","node_modules/core-js/internals/inspect-source.js","node_modules/core-js/internals/weak-map-basic-detection.js","node_modules/core-js/internals/is-object.js","node_modules/core-js/internals/document-create-element.js","node_modules/core-js/internals/ie8-dom-define.js","node_modules/core-js/internals/v8-prototype-define-bug.js","node_modules/core-js/internals/an-object.js","node_modules/core-js/internals/function-call.js","node_modules/core-js/internals/get-built-in.js","node_modules/core-js/internals/object-is-prototype-of.js","node_modules/core-js/internals/engine-user-agent.js","node_modules/core-js/internals/engine-v8-version.js","node_modules/core-js/internals/symbol-constructor-detection.js","node_modules/core-js/internals/use-symbol-as-uid.js","node_modules/core-js/internals/is-symbol.js","node_modules/core-js/internals/try-to-string.js","node_modules/core-js/internals/a-callable.js","node_modules/core-js/internals/get-method.js","node_modules/core-js/internals/ordinary-to-primitive.js","node_modules/core-js/internals/shared.js","node_modules/core-js/internals/uid.js","node_modules/core-js/internals/well-known-symbol.js","node_modules/core-js/internals/to-primitive.js","node_modules/core-js/internals/to-property-key.js","node_modules/core-js/internals/object-define-property.js","node_modules/core-js/internals/create-property-descriptor.js","node_modules/core-js/internals/create-non-enumerable-property.js","node_modules/core-js/internals/shared-key.js","node_modules/core-js/internals/internal-state.js","node_modules/core-js/internals/make-built-in.js","node_modules/core-js/internals/define-built-in-accessor.js","node_modules/core-js/internals/regexp-flags.js","node_modules/core-js/modules/es.regexp.flags.js","src/grammar.js","src/TinyMDE.js"],"sourcesContent":["const svg = {\n  blockquote: `<svg height=\"18\" width=\"18\"><rect width=\"5\" height=\"5\" x=\"3\" y=\"4\" ry=\"1\"/><rect ry=\"1\" y=\"4\" x=\"10\" height=\"5\" width=\"5\"/><path d=\"M8 6.999v3c0 1-1 3-1 3s-.331 1-1.331 1h-1c-1 0-.669-1-.669-1s1-2 1-3v-3zm7 0v3c0 1-1 3-1 3s-.331 1-1.331 1h-1c-1 0-.669-1-.669-1s1-2 1-3v-3z\"/></svg>`,\n  bold: `<svg height=\"18\" width=\"18\"><path d=\"M4 2a1 1 0 00-1 1v12a1 1 0 001 1h6c4 0 5-2 5-4 0-1.322-.434-2.636-1.885-3.381C13.772 7.885 14 6.945 14 6c0-2-1-4-5-4zm1 2h4c1.668 0 2.32.393 2.6.672.28.279.4.662.4 1.328s-.12 1.057-.4 1.338c-.275.274-1.014.646-2.6.662H5zm5 6c1.666.005 2.318.388 2.596.666.277.278.404.667.404 1.334s-.127 1.06-.404 1.338c-.278.278-.93.66-2.596.662l-4.992.004L5 10z\"/></svg>`,\n  clear_formatting: `<svg height=\"18\" width=\"18\"><path d=\"M11.03 1a1 1 0 00-.74.3l-9 9a1 1 0 000 1.4l4 4A1 1 0 006 16h2a1 1 0 00.7-.3l8-8a1 1 0 000-1.4l-5-5a1 1 0 00-.67-.3zM8.7 5.7l3.58 3.6L7.6 14H6.4l-3-3 5.3-5.3z\"/><rect ry=\".8\" rx=\".8\" y=\"14\" x=\"16\" height=\"2\" width=\"2\"/><rect width=\"2\" height=\"2\" x=\"13\" y=\"14\" rx=\".8\" ry=\".8\"/><rect ry=\".8\" rx=\".8\" y=\"14\" x=\"10\" height=\"2\" width=\"2\"/></svg>`,\n  code: `<svg height=\"18\" width=\"18\"><path d=\"M13.5 2.994a.5.5 0 00-.5.5.5.5 0 000 .034V4.53a5.993 5.993 0 00-7.451-.445A6 6 0 1012.45 13.9a5.99 5.99 0 001.346-1.334.5.5 0 00.096-.101.5.5 0 00-.12-.698.5.5 0 00-.697.12l-.004-.005a5 5 0 01-1.197 1.2 5 5 0 111.215-6.965.5.5 0 00.697.12.5.5 0 00.211-.44V4.745H14V3.493a.5.5 0 00-.5-.5z\"/></svg>`,\n  h1: `<svg height=\"18\" width=\"18\"><path d=\"M3 2s0-1 1-1h1c1 0 1 1 1 1v6h6V2s0-1 1-1h1c1 0 1 1 1 1v14s0 1-1 1h-1c-1 0-1-1-1-1v-6H6v6s0 1-1 1H4c-1 0-1-1-1-1z\"/></svg>`,\n  h2: `<svg height=\"18\" width=\"18\"><path d=\"M4 2s0-1 1-1 1 1 1 1v6c1-1 2-1 4-1 3 0 4 2 4 4v5s0 1-1 1-1-1-1-1v-5c0-1.094-1-2-2-2-2 0-3 0-4 2v5s0 1-1 1-1-1-1-1z\"/></svg>`,\n  hr: `<svg height=\"18\" width=\"18\"><rect ry=\"1\" y=\"8\" height=\"2\" width=\"18\" style=\"font-variation-settings:normal;marker:none\"/></svg>`,\n  image: `<svg height=\"18\" width=\"18\"><path d=\"M1 2v14h16V2H1zm2 2h12v7l-3-3-4 4-2-2-3 3V4z\"/><circle r=\"1.5\" cy=\"6.5\" cx=\"5.5\"/></svg>`,\n  italic: `<svg height=\"18\" width=\"18\"><path d=\"M9 2a1 1 0 000 2L7 14a1 1 0 100 2h2a1 1 0 000-2l2-10a1 1 0 100-2z\"/></svg>`,\n  link: `<svg height=\"18\" width=\"18\"><path d=\"M9.07 5.18a3.9 3.9 0 00-1.52.43C6.31 6.22 5.3 7.29 4.3 8.29c-1 1-2.07 2.02-2.68 3.26-.31.62-.5 1.33-.41 2.07.09.75.48 1.47 1.1 2.09.61.61 1.33 1 2.08 1.1.74.09 1.45-.1 2.07-.42 1.24-.61 2.26-1.68 3.26-2.68.46-.47.94-.94 1.39-1.44l-.43.26c-.68.34-1.49.56-2.36.46-.2-.03-.4-.08-.6-.14-.79.76-1.55 1.45-2.16 1.76-.38.19-.67.24-.92.21-.26-.03-.54-.14-.92-.53-.39-.38-.5-.66-.53-.91-.03-.26.02-.55.21-.93.39-.76 1.32-1.74 2.32-2.74 1-1 1.98-1.93 2.74-2.32.38-.19.67-.24.93-.21.25.03.53.14.91.53.39.38.5.66.53.92v.06l1.12-1.06.44-.47c-.18-.3-.4-.6-.67-.87-.62-.61-1.34-1-2.09-1.1a3.08 3.08 0 00-.55-.01z\"/><path d=\"M13.07.86a3.9 3.9 0 00-1.52.43c-1.24.62-2.26 1.69-3.26 2.69-.46.47-.94.94-1.39 1.43.15-.08.28-.18.43-.25a4.4 4.4 0 012.36-.46c.2.02.4.07.6.14.79-.77 1.55-1.46 2.16-1.76.38-.19.67-.25.93-.21.25.03.53.14.91.52.39.38.5.66.53.92.03.26-.02.55-.21.93-.39.76-1.32 1.74-2.32 2.74-1 1-1.98 1.93-2.74 2.31-.38.2-.67.25-.93.22-.25-.04-.53-.15-.91-.53-.39-.38-.5-.66-.53-.92V9c-.36.33-.73.67-1.12 1.06l-.43.46c.17.3.4.6.66.87.62.62 1.34 1 2.08 1.1.75.1 1.46-.1 2.08-.41 1.24-.62 2.26-1.69 3.26-2.69s2.07-2.02 2.68-3.26c.31-.62.5-1.32.41-2.07a3.63 3.63 0 00-1.1-2.08c-.61-.62-1.33-1-2.07-1.1a3.08 3.08 0 00-.56-.02z\"/></svg>`,\n  ol: `<svg height=\"18\" width=\"18\"><path d=\"M1.5 7a.5.5 0 100 1h1a.5.5 0 01.5.5c0 .164-.08.31-.14.355l-1.655 1.25A.492.492 0 001 10.5a.5.5 0 00.5.5h2a.5.5 0 000-1H3l.398-.299A1.5 1.5 0 002.5 7z\"/><path d=\"M1.5 12c-.667 0-.667 1 0 1h1.25c.333 0 .333.5 0 .5H2.5c-.667 0-.667 1 0 1h.25c.333 0 .333.5 0 .5H1.5c-.667 0-.667 1 0 1h1c.398 0 .78-.131 1.06-.365.282-.235.44-.554.44-.885a1.121 1.121 0 00-.303-.75c.191-.204.3-.47.303-.75 0-.332-.158-.651-.44-.885-.3-.241-.675-.37-1.06-.365z\"/><rect y=\"13\" x=\"6\" height=\"2\" width=\"12\" ry=\"1\"/><rect ry=\"1\" width=\"12\" height=\"2\" x=\"6\" y=\"8\"/><rect y=\"3\" x=\"6\" height=\"2\" width=\"12\" ry=\"1\"/><path d=\"M1.5 2a.5.5 0 100 1H2v2h-.5a.5.5 0 100 1h2a.5.5 0 100-1H3V2.5c0-.277-.223-.5-.5-.5z\"/></svg>`,\n  strikethrough: `<svg width=\"18\" height=\"18\"><path d=\"M10 2C6 2 4 4 4 6c0 .338.08.672.193 1h2.34C6.113 6.629 6 6.295 6 6c0-.334.117-.725.691-1.154C7.265 4.416 8.331 4 10 4h3a1 1 0 000-2zm1.477 9c.413.368.523.706.523 1 0 .334-.127.712-.701 1.143-.575.43-1.632.85-3.299.857l-1.006.007V14H5a1 1 0 000 2h3c4 0 6-2 6-4 0-.338-.081-.672-.195-1z\"/><rect ry=\"1\" y=\"8\" x=\"1\" height=\"2\" width=\"16\"/></svg>`,\n  ul: `<svg height=\"18\" width=\"18\"><circle cx=\"2\" cy=\"9\" r=\"2\"/><circle cy=\"4\" cx=\"2\" r=\"2\"/><rect y=\"3\" x=\"6\" height=\"2\" width=\"12\" ry=\"1\"/><circle cx=\"2\" cy=\"14\" r=\"2\"/><rect ry=\"1\" width=\"12\" height=\"2\" x=\"6\" y=\"8\"/><rect y=\"13\" x=\"6\" height=\"2\" width=\"12\" ry=\"1\"/></svg>`\n};\n\nexport default svg;","import svg from './svg/svg';\n\nconst isMacLike = /(Mac|iPhone|iPod|iPad)/i.test(typeof navigator !== \"undefined\" ? navigator.platform : \"\");\n\nconst DefaultCommands = {\n  'bold': {\n    name: 'bold',\n    action: 'bold',\n    innerHTML: svg.bold,\n    title: 'Bold',\n    hotkey: 'Mod-B',\n  },\n  'italic': {\n    name: 'italic',\n    action: 'italic',\n    innerHTML: svg.italic,\n    title: 'Italic',\n    hotkey: 'Mod-I',\n  },\n  'strikethrough': {\n    name: 'strikethrough',\n    action: 'strikethrough',\n    innerHTML: svg.strikethrough,\n    title: 'Strikethrough',\n    hotkey: 'Mod2-Shift-5',\n  },\n  'code': {\n    name: 'code',\n    action: 'code',\n    innerHTML: svg.code,\n    title: 'Format as code',\n  },\n  'h1': {\n    name: 'h1',\n    action: 'h1',\n    innerHTML: svg.h1,\n    title: 'Level 1 heading',\n    hotkey: 'Mod-Shift-1',\n  },\n  'h2': {\n    name: 'h2',\n    action: 'h2',\n    innerHTML: svg.h2,\n    title: 'Level 2 heading',\n    hotkey: 'Mod-Shift-2',\n  },\n  'ul': {\n    name: 'ul',\n    action: 'ul',\n    innerHTML: svg.ul,\n    title: 'Bulleted list',\n  },\n  'ol': {\n    name: 'ol',\n    action: 'ol',\n    innerHTML: svg.ol,\n    title: 'Numbered list',\n  },\n  'blockquote': {\n    name: 'blockquote',\n    action: 'blockquote',\n    innerHTML: svg.blockquote,\n    title: 'Quote',\n    hotkey: 'Mod2-Shift-Q',\n  },\n  'insertLink': {\n    name: 'insertLink',\n    action: (editor) => {if (editor.isInlineFormattingAllowed()) editor.wrapSelection('[', ']()')},\n    enabled: (editor, focus, anchor) => editor.isInlineFormattingAllowed(focus, anchor) ? false : null,\n    innerHTML: svg.link,\n    title: 'Insert link',\n    hotkey: 'Mod-K',\n  },\n  'insertImage': {\n    name: 'insertImage',\n    action: (editor) => {if (editor.isInlineFormattingAllowed()) editor.wrapSelection('![', ']()')},\n    enabled: (editor, focus, anchor) => editor.isInlineFormattingAllowed(focus, anchor) ? false : null,\n    innerHTML: svg.image,\n    title: 'Insert image',\n    hotkey: 'Mod2-Shift-I',\n  },\n  'hr': {\n    name: 'hr',\n    action: (editor) => editor.paste('\\n***\\n'),\n    enabled: () => false,\n    innerHTML: svg.hr,\n    title: 'Insert horizontal line',\n    hotkey: 'Mod2-Shift-L'\n  }\n}\n\n\nclass CommandBar {\n  constructor(props) {\n    this.e = null;\n    this.editor = null;\n    this.commands = [];\n    this.buttons = {};\n    this.state = {};\n    this.hotkeys = [];\n\n    let element = props.element;\n    if (element && !element.tagName) {\n      element = document.getElementById(props.element);\n    }\n    if (!element) {\n      element = document.body; \n    }\n    this.createCommandBarElement(element, props.commands || ['bold', 'italic', 'strikethrough', '|', 'code', '|', 'h1', 'h2', '|', 'ul', 'ol', '|', 'blockquote', 'hr', '|', 'insertLink', 'insertImage']);\n    document.addEventListener('keydown', (e) => this.handleKeydown(e));\n    if (props.editor) this.setEditor(props.editor);\n  }\n\n  createCommandBarElement(parentElement, commands) {\n    this.e = document.createElement('div');\n    this.e.className = 'TMCommandBar';\n\n    for (let command of commands) {\n      if (command == '|') {\n        let el = document.createElement('div');\n        el.className = 'TMCommandDivider';\n        this.e.appendChild(el);\n      } else {\n        let commandName;\n        if (typeof command == \"string\") {\n          // Reference to default command\n\n          if (DefaultCommands[command]) {\n            commandName = command;\n            this.commands[commandName] = DefaultCommands[commandName];\n\n            \n          } else {\n            continue;\n          }\n          \n        } else if (typeof command == \"object\" && command.name) {\n          commandName = command.name;\n          this.commands[commandName] = {}; \n          if (DefaultCommands[commandName]) Object.assign(this.commands[commandName], DefaultCommands[commandName]);\n          Object.assign(this.commands[commandName], command);\n        \n\n        } else {\n          continue;\n        }\n\n        let title = this.commands[commandName].title || commandName;\n\n        if (this.commands[commandName].hotkey) {\n          const keys = this.commands[commandName].hotkey.split('-');\n          // construct modifiers\n          let modifiers = [];\n          let modifierexplanation = [];\n          for (let i = 0; i < keys.length - 1; i++) {\n            switch (keys[i]) {\n              case 'Ctrl': modifiers.push('ctrlKey'); modifierexplanation.push('Ctrl'); break;\n              case 'Cmd': modifiers.push('metaKey'); modifierexplanation.push('⌘'); break;\n              case 'Alt': modifiers.push('altKey'); modifierexplanation.push('Alt'); break;\n              case 'Option': modifiers.push('altKey'); modifierexplanation.push('⌥'); break;\n              case 'Win': modifiers.push('metaKey'); modifierexplanation.push('⊞ Win'); break;\n\n              case 'Shift':  modifiers.push('shiftKey'); modifierexplanation.push('⇧'); break;\n\n              case 'Mod': // Mod is a convenience mechanism: Ctrl on Windows, Cmd on Mac\n                if (isMacLike) {modifiers.push('metaKey'); modifierexplanation.push('⌘');} \n                else {modifiers.push('ctrlKey'); modifierexplanation.push('Ctrl');} \n                break; \n              case 'Mod2': \n                modifiers.push('altKey'); \n                if (isMacLike) modifierexplanation.push('⌥');\n                else modifierexplanation.push('Alt');\n                break; // Mod2 is a convenience mechanism: Alt on Windows, Option on Mac\n            }\n          }\n          modifierexplanation.push(keys[keys.length - 1]);\n          let hotkey = {\n            \n            modifiers: modifiers,\n            command: commandName,\n          };\n          // TODO Right now this is working only for letters and numbers\n          if (keys[keys.length - 1].match(/^[0-9]$/)) {\n            hotkey.code = `Digit${keys[keys.length - 1]}`;\n          } else {\n            hotkey.key = keys[keys.length - 1].toLowerCase();\n          }\n          this.hotkeys.push(hotkey);\n          title = title.concat(` (${modifierexplanation.join('+')})`);\n        }\n\n        this.buttons[commandName] = document.createElement('div');\n        this.buttons[commandName].className = 'TMCommandButton TMCommandButton_Disabled';\n        this.buttons[commandName].title = title;\n        this.buttons[commandName].innerHTML = this.commands[commandName].innerHTML;\n\n        this.buttons[commandName].addEventListener('mousedown', (e) => this.handleClick(commandName, e));\n        this.e.appendChild(this.buttons[commandName]);\n      }\n    }\n    parentElement.appendChild(this.e);\n  }\n\n  handleClick(commandName, event) {\n    if (!this.editor) return;\n    event.preventDefault();\n    if (typeof this.commands[commandName].action == \"string\") {\n      if (this.state[commandName] === false) this.editor.setCommandState(commandName, true);\n      else this.editor.setCommandState(commandName, false);  \n    } else if (typeof this.commands[commandName].action == \"function\") {\n      this.commands[commandName].action(this.editor);\n    }\n  }\n\n  setEditor(editor) {\n    this.editor = editor;\n    editor.addEventListener('selection', (e) => this.handleSelection(e));\n  }\n\n  handleSelection(event) {\n    if (event.commandState) {\n      for (let command in this.commands) {\n        if (event.commandState[command] === undefined) {\n          if (this.commands[command].enabled) this.state[command] = this.commands[command].enabled(this.editor, event.focus, event.anchor);\n          else this.state[command] = event.focus ? false : null;\n        } else {\n          this.state[command] = event.commandState[command];\n        }\n\n        if (this.state[command] === true) {\n          this.buttons[command].className = 'TMCommandButton TMCommandButton_Active';\n        } else if (this.state[command] === false) {\n          this.buttons[command].className = 'TMCommandButton TMCommandButton_Inactive';\n        } else {\n          this.buttons[command].className =  'TMCommandButton TMCommandButton_Disabled';\n        }\n      }\n    }\n  }\n\n  handleKeydown(event) {\n    outer: for (let hotkey of this.hotkeys) {\n      if ((hotkey.key && event.key.toLowerCase() == hotkey.key) || (hotkey.code && event.code == hotkey.code)) {\n        // Key matches hotkey. Look for any required modifier that wasn't pressed\n        for (let modifier of hotkey.modifiers) {\n          if (!event[modifier]) continue outer;\n        }\n        // Everything matches.\n        this.handleClick(hotkey.command, event);\n        return;\n      }\n    }\n  }\n}\n\nexport default CommandBar;","'use strict';\nvar check = function (it) {\n  return it && it.Math === Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || this || Function('return this')();\n","'use strict';\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;\n});\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar call = FunctionPrototype.call;\nvar uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);\n\nmodule.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call.apply(fn, arguments);\n  };\n};\n","'use strict';\nvar documentAll = typeof document == 'object' && document.all;\n\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nvar IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;\n\nmodule.exports = {\n  all: documentAll,\n  IS_HTMLDDA: IS_HTMLDDA\n};\n","'use strict';\nvar $documentAll = require('../internals/document-all');\n\nvar documentAll = $documentAll.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nmodule.exports = $documentAll.IS_HTMLDDA ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n","'use strict';\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nmodule.exports = function (it) {\n  return it === null || it === undefined;\n};\n","'use strict';\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\nvar $TypeError = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (isNullOrUndefined(it)) throw new $TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","'use strict';\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar $Object = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return $Object(requireObjectCoercible(argument));\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar hasOwn = require('../internals/has-own-property');\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n","'use strict';\nvar global = require('../internals/global');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(global, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","'use strict';\nvar global = require('../internals/global');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || defineGlobalProperty(SHARED, {});\n\nmodule.exports = store;\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar store = require('../internals/shared-store');\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","'use strict';\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar $documentAll = require('../internals/document-all');\n\nvar documentAll = $documentAll.all;\n\nmodule.exports = $documentAll.IS_HTMLDDA ? function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;\n} : function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n","'use strict';\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thanks to IE8 for its funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a !== 7;\n});\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nmodule.exports = DESCRIPTORS && fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype !== 42;\n});\n","'use strict';\nvar isObject = require('../internals/is-object');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw new $TypeError($String(argument) + ' is not an object');\n};\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar call = Function.prototype.call;\n\nmodule.exports = NATIVE_BIND ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n","'use strict';\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar aFunction = function (argument) {\n  return isCallable(argument) ? argument : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n","'use strict';\nmodule.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';\n","'use strict';\nvar global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar Deno = global.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/engine-v8-version');\nvar fails = require('../internals/fails');\nvar global = require('../internals/global');\n\nvar $String = global.String;\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol('symbol detection');\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n  // of course, fail.\n  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar $Object = Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));\n};\n","'use strict';\nvar $String = String;\n\nmodule.exports = function (argument) {\n  try {\n    return $String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw new $TypeError(tryToString(argument) + ' is not a function');\n};\n","'use strict';\nvar aCallable = require('../internals/a-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined(func) ? undefined : aCallable(func);\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar $TypeError = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw new $TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.33.0',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n","'use strict';\nvar global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar hasOwn = require('../internals/has-own-property');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar Symbol = global.Symbol;\nvar WellKnownSymbolsStore = shared('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name)) {\n    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)\n      ? Symbol[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar isObject = require('../internals/is-object');\nvar isSymbol = require('../internals/is-symbol');\nvar getMethod = require('../internals/get-method');\nvar ordinaryToPrimitive = require('../internals/ordinary-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar $TypeError = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw new $TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar isSymbol = require('../internals/is-symbol');\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar anObject = require('../internals/an-object');\nvar toPropertyKey = require('../internals/to-property-key');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","'use strict';\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","'use strict';\nvar shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","'use strict';\nvar NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = global.TypeError;\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw new TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store.get = store.get;\n  store.has = store.has;\n  store.set = store.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set = function (it, metadata) {\n    if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store.set(it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return store.get(it) || {};\n  };\n  has = function (it) {\n    return store.has(it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar $String = String;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\nvar stringSlice = uncurryThis(''.slice);\nvar replace = uncurryThis(''.replace);\nvar join = uncurryThis([].join);\n\nvar CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {\n  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;\n});\n\nvar TEMPLATE = String(String).split('String');\n\nvar makeBuiltIn = module.exports = function (value, name, options) {\n  if (stringSlice($String(name), 0, 7) === 'Symbol(') {\n    name = '[' + replace($String(name), /^Symbol\\(([^)]*)\\)/, '$1') + ']';\n  }\n  if (options && options.getter) name = 'get ' + name;\n  if (options && options.setter) name = 'set ' + name;\n  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {\n    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });\n    else value.name = name;\n  }\n  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {\n    defineProperty(value, 'length', { value: options.arity });\n  }\n  try {\n    if (options && hasOwn(options, 'constructor') && options.constructor) {\n      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });\n    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable\n    } else if (value.prototype) value.prototype = undefined;\n  } catch (error) { /* empty */ }\n  var state = enforceInternalState(value);\n  if (!hasOwn(state, 'source')) {\n    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');\n  } return value;\n};\n\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = makeBuiltIn(function toString() {\n  return isCallable(this) && getInternalState(this).source || inspectSource(this);\n}, 'toString');\n","'use strict';\nvar makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.hasIndices) result += 'd';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.unicodeSets) result += 'v';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","'use strict';\nvar global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar regExpFlags = require('../internals/regexp-flags');\nvar fails = require('../internals/fails');\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError\nvar RegExp = global.RegExp;\nvar RegExpPrototype = RegExp.prototype;\n\nvar FORCED = DESCRIPTORS && fails(function () {\n  var INDICES_SUPPORT = true;\n  try {\n    RegExp('.', 'd');\n  } catch (error) {\n    INDICES_SUPPORT = false;\n  }\n\n  var O = {};\n  // modern V8 bug\n  var calls = '';\n  var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';\n\n  var addGetter = function (key, chr) {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty(O, key, { get: function () {\n      calls += chr;\n      return true;\n    } });\n  };\n\n  var pairs = {\n    dotAll: 's',\n    global: 'g',\n    ignoreCase: 'i',\n    multiline: 'm',\n    sticky: 'y'\n  };\n\n  if (INDICES_SUPPORT) pairs.hasIndices = 'd';\n\n  for (var key in pairs) addGetter(key, pairs[key]);\n\n  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n  var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);\n\n  return result !== expected || calls !== expected;\n});\n\n// `RegExp.prototype.flags` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nif (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {\n  configurable: true,\n  get: regExpFlags\n});\n","// const replacements = {\n//   ASCIIPunctuation: '!\"#$%&\\'()*+,\\\\-./:;<=>?@\\\\[\\\\]^_`{|}~',\n//   TriggerChars: '`_\\*\\[\\]\\(\\)',\n//   Scheme: `[A-Za-z][A-Za-z0-9\\+\\.\\-]{1,31}`,\n//   Email: `[a-zA-Z0-9.!#$%&'*+/=?^_\\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*`, // From CommonMark spec\n\n// }\nconst replacements = {\n  ASCIIPunctuation: /[!\"#$%&'()*+,\\-./:;<=>?@[\\]^_`{|}~\\\\]/,  \n  NotTriggerChar: /[^`_*[\\]()<>!~]/,\n  Scheme: /[A-Za-z][A-Za-z0-9+.-]{1,31}/,\n  Email: /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/, // From CommonMark spec\n  HTMLOpenTag: /<HTMLTagName(?:HTMLAttribute)*\\s*\\/?>/,\n  HTMLCloseTag: /<\\/HTMLTagName\\s*>/,\n  HTMLTagName: /[A-Za-z][A-Za-z0-9-]*/, \n  HTMLComment: /<!--(?:[^>-]|(?:[^>-](?:[^-]|-[^-])*[^-]))-->/,\n  HTMLPI: /<\\?(?:|.|(?:[^?]|\\?[^>])*)\\?>/,\n  HTMLDeclaration: /<![A-Z]+\\s[^>]*>/,\n  HTMLCDATA: /<!\\[CDATA\\[.*?\\]\\]>/,\n  HTMLAttribute: /\\s+[A-Za-z_:][A-Za-z0-9_.:-]*(?:HTMLAttValue)?/,\n  HTMLAttValue: /\\s*=\\s*(?:(?:'[^']*')|(?:\"[^\"]*\")|(?:[^\\s\"'=<>`]+))/,\n  KnownTag: /address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul/\n}\n\n// From CommonMark.js. \nconst punctuationLeading = new RegExp(/^(?:[!\"#$%&'()*+,\\-./:;<=>?@[\\]\\\\^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B])/);\n\nconst punctuationTrailing = new RegExp(/(?:[!\"#$%&'()*+,\\-./:;<=>?@[\\]\\\\^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B])$/);\n\n// export const inlineTriggerChars = new RegExp(`[${replacements.TriggerChars}]`);\n\n/**\n * This is CommonMark's block grammar, but we're ignoring nested blocks here.  \n */ \nconst lineGrammar = { \n  TMH1: { \n    regexp: /^( {0,3}#\\s)(.*?)((?:\\s+#+\\s*)?)$/, \n    replacement: '<span class=\"TMMark TMMark_TMH1\">$1</span>$$2<span class=\"TMMark TMMark_TMH1\">$3</span>'\n  },\n  TMH2: { \n    regexp: /^( {0,3}##\\s)(.*?)((?:\\s+#+\\s*)?)$/, \n    replacement: '<span class=\"TMMark TMMark_TMH2\">$1</span>$$2<span class=\"TMMark TMMark_TMH2\">$3</span>'\n  },\n  TMH3: { \n    regexp: /^( {0,3}###\\s)(.*?)((?:\\s+#+\\s*)?)$/, \n    replacement: '<span class=\"TMMark TMMark_TMH3\">$1</span>$$2<span class=\"TMMark TMMark_TMH3\">$3</span>'\n  },\n  TMH4: { \n    regexp: /^( {0,3}####\\s)(.*?)((?:\\s+#+\\s*)?)$/, \n    replacement: '<span class=\"TMMark TMMark_TMH4\">$1</span>$$2<span class=\"TMMark TMMark_TMH4\">$3</span>'\n  },\n  TMH5: { \n    regexp: /^( {0,3}#####\\s)(.*?)((?:\\s+#+\\s*)?)$/, \n    replacement: '<span class=\"TMMark TMMark_TMH5\">$1</span>$$2<span class=\"TMMark TMMark_TMH5\">$3</span>'\n  },\n  TMH6: { \n    regexp: /^( {0,3}######\\s)(.*?)((?:\\s+#+\\s*)?)$/, \n    replacement: '<span class=\"TMMark TMMark_TMH6\">$1</span>$$2<span class=\"TMMark TMMark_TMH6\">$3</span>'\n  },\n  TMBlockquote: { \n    regexp: /^( {0,3}>[ ]?)(.*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMBlockquote\">$1</span>$$2'\n  },\n  TMCodeFenceBacktickOpen: { \n    regexp: /^( {0,3}(?<seq>````*)\\s*)([^`]*?)(\\s*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMCodeFenceBacktick\">$1</span><span class=\"TMInfoString\">$3</span>$4'\n  },\n  TMCodeFenceTildeOpen: { \n    regexp: /^( {0,3}(?<seq>~~~~*)\\s*)(.*?)(\\s*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMCodeFenceTilde\">$1</span><span class=\"TMInfoString\">$3</span>$4'\n  },\n  TMCodeFenceBacktickClose: { \n    regexp: /^( {0,3}(?<seq>````*))(\\s*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMCodeFenceBacktick\">$1</span>$3'\n  },\n  TMCodeFenceTildeClose: { \n    regexp: /^( {0,3}(?<seq>~~~~*))(\\s*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMCodeFenceTilde\">$1</span>$3'\n  },\n  TMBlankLine: { \n    regexp: /^([ \\t]*)$/, \n    replacement: '$0'\n  },\n  TMSetextH1Marker: { \n    regexp: /^ {0,3}=+\\s*$/, \n    replacement: '<span class=\"TMMark TMMark_TMSetextH1Marker\">$0</span>'\n  },\n  TMSetextH2Marker: { \n    regexp: /^ {0,3}-+\\s*$/, \n    replacement: '<span class=\"TMMark TMMark_TMSetextH1Marker\">$0</span>'\n  },\n  TMHR: { \n    regexp: /^( {0,3}(\\*[ \\t]*\\*[ \\t]*\\*[ \\t*]*)|(-[ \\t]*-[ \\t]*-[ \\t-]*)|(_[ \\t]*_[ \\t]*_[ \\t_]*))$/, \n    replacement: '<span class=\"TMMark TMMark_TMHR\">$0</span>'\n  },\n  TMUL: { \n    regexp: /^( {0,3}[+*-] {1,4})(.*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMUL\">$1</span>$$2'\n  },\n  TMOL: { \n    regexp: /^( {0,3}\\d{1,9}[.)] {1,4})(.*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMOL\">$1</span>$$2'\n  },\n  // TODO: This is currently preventing sublists (and any content within list items, really) from working\n  TMIndentedCode: { \n    regexp: /^( {4}|\\t)(.*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMIndentedCode\">$1</span>$2'\n  },\n  TMLinkReferenceDefinition: {\n    // TODO: Link destination can't include unbalanced parantheses, but we just ignore that here \n    regexp: /^( {0,3}\\[\\s*)([^\\s\\]](?:[^\\]]|\\\\\\])*?)(\\s*\\]:\\s*)((?:[^\\s<>]+)|(?:<(?:[^<>\\\\]|\\\\.)*>))?(\\s*)((?:\\((?:[^()\\\\]|\\\\.)*\\))|(?:\"(?:[^\"\\\\]|\\\\.)*\")|(?:'(?:[^'\\\\]|\\\\.)*'))?(\\s*)$/, \n    replacement: '<span class=\"TMMark TMMark_TMLinkReferenceDefinition\">$1</span><span class=\"TMLinkLabel TMLinkLabel_Definition\">$2</span><span class=\"TMMark TMMark_TMLinkReferenceDefinition\">$3</span><span class=\"TMLinkDestination\">$4</span>$5<span class=\"TMLinkTitle\">$6</span>$7',\n    labelPlaceholder: 2, // this defines which placeholder in the above regex is the link \"label\"\n  },\n};\n\n/**\n * HTML blocks have multiple different classes of opener and closer. This array defines all the cases\n */\nvar htmlBlockGrammar = [\n  { start: /^ {0,3}<(?:script|pre|style)(?:\\s|>|$)/i, end: /(?:<\\/script>|<\\/pre>|<\\/style>)/i, paraInterrupt: true },\n  { start: /^ {0,3}<!--/, end: /-->/, paraInterrupt: true },\n  { start: /^ {0,3}<\\?/, end: /\\?>/, paraInterrupt: true },\n  { start: /^ {0,3}<![A-Z]/, end: />/, paraInterrupt : true},\n  { start: /^ {0,3}<!\\[CDATA\\[/, end: /\\]\\]>/, paraInterrupt : true},\n  { start: /^ {0,3}(?:<|<\\/)(?:KnownTag)(?:\\s|>|\\/>|$)/i, end: false, paraInterrupt: true},\n  { start: /^ {0,3}(?:HTMLOpenTag|HTMLCloseTag)\\s*$/, end: false, paraInterrupt: false},\n];\n\n/**\n * Structure of the object:\n * Top level entries are rules, each consisting of a regular expressions (in string format) as well as a replacement.\n * In the regular expressions, replacements from the object 'replacements' will be processed before compiling into the property regexp.\n */\nvar inlineGrammar = {\n  escape : {\n    regexp: /^\\\\(ASCIIPunctuation)/,\n    replacement : '<span class=\"TMMark TMMark_TMEscape\">\\\\</span>$1'\n  },\n  code : {\n    regexp: /^(`+)((?:[^`])|(?:[^`].*?[^`]))(\\1)/,\n    replacement : '<span class=\"TMMark TMMark_TMCode\">$1</span><code class=\"TMCode\">$2</code><span class=\"TMMark TMMark_TMCode\">$3</span>' \n  },\n  autolink : {\n    regexp: /^<((?:Scheme:[^\\s<>]*)|(?:Email))>/,\n    replacement: '<span class=\"TMMark TMMark_TMAutolink\">&lt;</span><span class=\"TMAutolink\">$1</span><span class=\"TMMark TMMark_TMAutolink\">&gt;</span>'\n  },\n  html : {\n    regexp: /^((?:HTMLOpenTag)|(?:HTMLCloseTag)|(?:HTMLComment)|(?:HTMLPI)|(?:HTMLDeclaration)|(?:HTMLCDATA))/,\n    replacement: '<span class=\"TMHTML\">$1</span>',\n  },\n  linkOpen : {\n    regexp: /^\\[/,\n    replacement: ''\n  },\n  imageOpen : {\n    regexp: /^!\\[/,\n    replacement : ''\n  },\n  linkLabel : {\n    regexp: /^(\\[\\s*)([^\\]]*?)(\\s*\\])/,\n    replacement: '',\n    labelPlaceholder: 2\n  },\n  default : {\n    regexp: /^(.|(?:NotTriggerChar+))/,\n    replacement: '$1'\n  }\n};\n\n// Process replacements in regexps\nconst replacementRegexp = new RegExp(Object.keys(replacements).join('|'));\n\n// Inline\nconst inlineRules =[...Object.keys(inlineGrammar)];\nfor (let rule of inlineRules) {\n  let re = inlineGrammar[rule].regexp.source;\n  // Replace while there is something to replace. This means it also works over multiple levels (replacements containing replacements)\n  while (re.match(replacementRegexp)) {\n    re = re.replace(replacementRegexp, (string) => { return replacements[string].source; });\n  }\n  inlineGrammar[rule].regexp = new RegExp(re, inlineGrammar[rule].regexp.flags);\n}\n\n// HTML Block (only opening rule is processed currently)\nfor (let rule of htmlBlockGrammar) {\n  let re = rule.start.source;\n  // Replace while there is something to replace. This means it also works over multiple levels (replacements containing replacements)\n  while (re.match(replacementRegexp)) {\n    re = re.replace(replacementRegexp, (string) => { return replacements[string].source; });\n  }\n  rule.start = new RegExp(re, rule.start.flags);\n}\n\n/**\n * Escapes HTML special characters (<, >, and &) in the string.\n * @param {string} string The raw string to be escaped\n * @returns {string} The string, ready to be used in HTML\n */\nfunction htmlescape(string) {\n  return (string ? string : '')\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n/**\n * Contains the commands that can be sent to the editor. Contains objects with a name representing the name of the command.\n * Each of the objects contains the following keys:\n * \n *   - type: Can be either inline (for inline formatting) or line (for block / line formatting).\n *   - className: Used to determine whether the command is active at a given position. \n *     For line formatting, this looks at the class of the line element. For inline elements, tries to find an enclosing element with that class.\n *   - set / unset: Contain instructions how to set and unset the command. For line type commands, both consist of a pattern and replacement that \n *     will be applied to each line (using String.replace). For inline type commands, the set object contains a pre and post string which will\n *     be inserted before and after the selection. The unset object contains a prePattern and a postPattern. Both should be regular expressions and \n *     they will be applied to the portion of the line before and after the selection (using String.replace, with an empty replacement string).\n */\nconst commands = {\n  // Replacements for unset for inline commands are '' by default\n  bold: {\n    type: 'inline', \n    className: 'TMStrong', \n    set: {pre: '**', post: '**'}, \n    unset: {prePattern: /(?:\\*\\*|__)$/, postPattern: /^(?:\\*\\*|__)/}\n  }, \n  italic: {\n    type: 'inline', \n    className: 'TMEm', \n    set: {pre: '*', post: '*'}, \n    unset: {prePattern: /(?:\\*|_)$/, postPattern: /^(?:\\*|_)/}\n  },\n  code: {\n    type: 'inline', \n    className: 'TMCode', \n    set: {pre: '`', post: '`'}, \n    unset: {prePattern: /`+$/, postPattern: /^`+/} // FIXME this doesn't ensure balanced backticks right now\n  }, \n  strikethrough: {\n    type: 'inline', \n    className: 'TMStrikethrough', \n    set: {pre: '~~', post: '~~'}, \n    unset: {prePattern:/~~$/, postPattern: /^~~/ }\n  },\n  h1: {\n    type: 'line', \n    className: 'TMH1', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '# $2'}, \n    unset: {pattern: /^( {0,3}#\\s+)(.*?)((?:\\s+#+\\s*)?)$/, replacement: '$2'}\n  },\n  h2: {\n    type: 'line', \n    className: 'TMH2', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '## $2'}, \n    unset: {pattern: /^( {0,3}##\\s+)(.*?)((?:\\s+#+\\s*)?)$/, replacement: '$2'}\n  },\n  h3: {\n    type: 'line', \n    className: 'TMH3', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '### $2'}, \n    unset: {pattern: /^( {0,3}###\\s+)(.*?)((?:\\s+#+\\s*)?)$/, replacement: '$2'}\n  },\n  h4: {\n    type: 'line', \n    className: 'TMH4', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '#### $2'}, \n    unset: {pattern: /^( {0,3}####\\s+)(.*?)((?:\\s+#+\\s*)?)$/, replacement: '$2'}\n  },\n  h5: {\n    type: 'line', \n    className: 'TMH5', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '##### $2'}, \n    unset: {pattern: /^( {0,3}#####\\s+)(.*?)((?:\\s+#+\\s*)?)$/, replacement: '$2'}\n  },\n  h6: {\n    type: 'line', \n    className: 'TMH6', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '###### $2'}, \n    unset: {pattern: /^( {0,3}######\\s+)(.*?)((?:\\s+#+\\s*)?)$/, replacement: '$2'}\n  },\n  ul: {\n    type: 'line', \n    className: 'TMUL', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '- $2'}, \n    unset: {pattern: /^( {0,3}[+*-] {1,4})(.*)$/, replacement: '$2'}\n  },\n  ol: {\n    type: 'line', \n    className: 'TMOL', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '$#. $2'}, \n    unset: {pattern: /^( {0,3}\\d{1,9}[.)] {1,4})(.*)$/, replacement: '$2'}\n  }, \n  blockquote: {\n    type: 'line', \n    className: 'TMBlockquote', \n    set: {pattern: /^( {0,3}(?:(?:#+|[0-9]{1,9}[).]|[>\\-*+])\\s+)?)(.*)$/, replacement: '> $2'}, \n    unset: {pattern: /^( {0,3}>[ ]?)(.*)$/, replacement: '$2'}\n  },\n};\n\nexport { lineGrammar, inlineGrammar, punctuationLeading, punctuationTrailing, htmlescape, htmlBlockGrammar, commands };","import {\n  inlineGrammar,\n  lineGrammar,\n  punctuationLeading,\n  punctuationTrailing,\n  htmlescape,\n  htmlBlockGrammar,\n  commands,\n} from \"./grammar\";\n\nclass Editor {\n  constructor(props = {}) {\n    this.e = null;\n    this.textarea = null;\n    this.lines = [];\n    this.lineElements = [];\n    this.lineTypes = [];\n    this.lineCaptures = [];\n    this.lineReplacements = [];\n    this.linkLabels = [];\n    this.lineDirty = [];\n    this.lastCommandState = null;\n\n    this.listeners = {\n      change: [],\n      selection: [],\n      drop: [],\n    };\n\n    let element = props.element;\n    this.textarea = props.textarea;\n\n    if (this.textarea) {\n      if (!this.textarea.tagName) {\n        this.textarea = document.getElementById(this.textarea);\n      }\n      if (!element) element = this.textarea;\n    }\n\n    if (element && !element.tagName) {\n      element = document.getElementById(props.element);\n    }\n    if (!element) {\n      element = document.getElementsByTagName(\"body\")[0];\n    }\n    if (element.tagName == \"TEXTAREA\") {\n      this.textarea = element;\n      element = this.textarea.parentNode;\n    }\n\n    if (this.textarea) {\n      this.textarea.style.display = \"none\";\n    }\n\n    this.createEditorElement(element, props);\n    this.setContent(\n      typeof props.content === \"string\"\n        ? props.content\n        : this.textarea\n        ? this.textarea.value\n        : \"# Hello TinyMDE!\\nEdit **here**\"\n    );\n  }\n\n  /**\n   * Creates the editor element inside the target element of the DOM tree\n   * @param element The target element of the DOM tree\n   * @param props options, passed from constructor's props\n   */\n  createEditorElement(element, props) {\n    if (props && props.editor !== undefined) {\n      if (props.editor.tagName) this.e = props.editor;\n      else this.e = document.getElementById(props.editor);\n    } else this.e = document.createElement(\"div\");\n\n    this.e.classList.add(\"TinyMDE\");\n    this.e.contentEditable = true;\n    // The following is important for formatting purposes, but also since otherwise the browser replaces subsequent spaces with  &nbsp; &nbsp;\n    // That breaks a lot of stuff, so we do this here and not in CSS—therefore, you don't have to remember to put this in the CSS file\n    this.e.style.whiteSpace = \"pre-wrap\";\n    // Avoid formatting (B / I / U) popping up on iOS\n    this.e.style.webkitUserModify = \"read-write-plaintext-only\";\n\n    if (props.editor === undefined) {\n      if (\n        this.textarea &&\n        this.textarea.parentNode == element &&\n        this.textarea.nextSibling\n      ) {\n        element.insertBefore(this.e, this.textarea.nextSibling);\n      } else {\n        element.appendChild(this.e);\n      }\n    }\n\n    this.e.addEventListener(\"input\", (e) => this.handleInputEvent(e));\n    this.e.addEventListener(\"compositionend\", (e) => this.handleInputEvent(e));\n    document.addEventListener(\"selectionchange\", (e) =>\n      this.handleSelectionChangeEvent(e)\n    );\n    this.e.addEventListener(\"paste\", (e) => this.handlePaste(e));\n    this.e.addEventListener(\"drop\", (e) => this.handleDrop(e));\n    this.lineElements = this.e.childNodes; // this will automatically update\n  }\n\n  /**\n   * Sets the editor content.\n   * @param {string} content The new Markdown content\n   */\n  setContent(content) {\n    // Delete any existing content\n    while (this.e.firstChild) {\n      this.e.removeChild(this.e.firstChild);\n    }\n    this.lines = content.split(/(?:\\r\\n|\\r|\\n)/);\n    this.lineDirty = [];\n    for (let lineNum = 0; lineNum < this.lines.length; lineNum++) {\n      let le = document.createElement(\"div\");\n      this.e.appendChild(le);\n      this.lineDirty.push(true);\n    }\n    this.lineTypes = new Array(this.lines.length);\n    this.updateFormatting();\n    this.fireChange();\n  }\n\n  /**\n   * Gets the editor content as a Markdown string.\n   * @returns {string} The editor content as a markdown string\n   */\n  getContent() {\n    return this.lines.join(\"\\n\");\n  }\n\n  /**\n   * This is the main method to update the formatting (from this.lines to HTML output)\n   */\n  updateFormatting() {\n    // First, parse line types. This will update this.lineTypes, this.lineReplacements, and this.lineCaptures\n    // We don't apply the formatting yet\n    this.updateLineTypes();\n    // Collect any valid link labels from link reference definitions—we need that for formatting to determine what's a valid link\n    this.updateLinkLabels();\n    // Now, apply the formatting\n    this.applyLineTypes();\n  }\n\n  /**\n   * Updates this.linkLabels: For every link reference definition (line type TMLinkReferenceDefinition), we collect the label\n   */\n  updateLinkLabels() {\n    this.linkLabels = [];\n    for (let l = 0; l < this.lines.length; l++) {\n      if (this.lineTypes[l] == \"TMLinkReferenceDefinition\") {\n        this.linkLabels.push(\n          this.lineCaptures[l][\n            lineGrammar.TMLinkReferenceDefinition.labelPlaceholder\n          ]\n        );\n      }\n    }\n  }\n\n  /**\n   * Helper function to replace placeholders from a RegExp capture. The replacement string can contain regular dollar placeholders (e.g., $1),\n   * which are interpreted like in String.replace(), but also double dollar placeholders ($$1). In the case of double dollar placeholders,\n   * Markdown inline grammar is applied on the content of the captured subgroup, i.e., $$1 processes inline Markdown grammar in the content of the\n   * first captured subgroup, and replaces `$$1` with the result.\n   *\n   * @param {string} replacement The replacement string, including placeholders.\n   * @param  capture The result of a RegExp.exec() call\n   * @returns The replacement string, with placeholders replaced from the capture result.\n   */\n  replace(replacement, capture) {\n    return replacement.replace(/(\\${1,2})([0-9])/g, (str, p1, p2) => {\n      if (p1 == \"$\") return htmlescape(capture[p2]);\n      else\n        return `<span class=\"TMInlineFormatted\">${this.processInlineStyles(\n          capture[p2]\n        )}</span>`;\n    });\n  }\n\n  /**\n   * Applies the line types (from this.lineTypes as well as the capture result in this.lineReplacements and this.lineCaptures)\n   * and processes inline formatting for all lines.\n   */\n  applyLineTypes() {\n    for (let lineNum = 0; lineNum < this.lines.length; lineNum++) {\n      if (this.lineDirty[lineNum]) {\n        let contentHTML = this.replace(\n          this.lineReplacements[lineNum],\n          this.lineCaptures[lineNum]\n        );\n        // this.lineHTML[lineNum] = (contentHTML == '' ? '<br />' : contentHTML); // Prevent empty elements which can't be selected etc.\n        this.lineElements[lineNum].className = this.lineTypes[lineNum];\n        this.lineElements[lineNum].removeAttribute(\"style\");\n        this.lineElements[lineNum].innerHTML =\n          contentHTML == \"\" ? \"<br />\" : contentHTML; // Prevent empty elements which can't be selected etc.\n      }\n      this.lineElements[lineNum].dataset.lineNum = lineNum;\n    }\n  }\n\n  /**\n   * Determines line types for all lines based on the line / block grammar. Captures the results of the respective line\n   * grammar regular expressions.\n   * Updates this.lineTypes, this.lineCaptures, and this.lineReplacements, as well as this.lineDirty.\n   */\n  updateLineTypes() {\n    let codeBlockType = false;\n    let codeBlockSeqLength = 0;\n    let htmlBlock = false;\n\n    for (let lineNum = 0; lineNum < this.lines.length; lineNum++) {\n      let lineType = \"TMPara\";\n      let lineCapture = [this.lines[lineNum]];\n      let lineReplacement = \"$$0\"; // Default replacement for paragraph: Inline format the entire line\n\n      // Check ongoing code blocks\n      // if (lineNum > 0 && (this.lineTypes[lineNum - 1] == 'TMCodeFenceBacktickOpen' || this.lineTypes[lineNum - 1] == 'TMFencedCodeBacktick')) {\n      if (codeBlockType == \"TMCodeFenceBacktickOpen\") {\n        // We're in a backtick-fenced code block, check if the current line closes it\n        let capture = lineGrammar.TMCodeFenceBacktickClose.regexp.exec(\n          this.lines[lineNum]\n        );\n        if (capture && capture.groups[\"seq\"].length >= codeBlockSeqLength) {\n          lineType = \"TMCodeFenceBacktickClose\";\n          lineReplacement = lineGrammar.TMCodeFenceBacktickClose.replacement;\n          lineCapture = capture;\n          codeBlockType = false;\n        } else {\n          lineType = \"TMFencedCodeBacktick\";\n          lineReplacement = '<span class=\"TMFencedCode\">$0<br /></span>';\n          lineCapture = [this.lines[lineNum]];\n        }\n      }\n      // if (lineNum > 0 && (this.lineTypes[lineNum - 1] == 'TMCodeFenceTildeOpen' || this.lineTypes[lineNum - 1] == 'TMFencedCodeTilde')) {\n      else if (codeBlockType == \"TMCodeFenceTildeOpen\") {\n        // We're in a tilde-fenced code block\n        let capture = lineGrammar.TMCodeFenceTildeClose.regexp.exec(\n          this.lines[lineNum]\n        );\n        if (capture && capture.groups[\"seq\"].length >= codeBlockSeqLength) {\n          lineType = \"TMCodeFenceTildeClose\";\n          lineReplacement = lineGrammar.TMCodeFenceTildeClose.replacement;\n          lineCapture = capture;\n          codeBlockType = false;\n        } else {\n          lineType = \"TMFencedCodeTilde\";\n          lineReplacement = '<span class=\"TMFencedCode\">$0<br /></span>';\n          lineCapture = [this.lines[lineNum]];\n        }\n      }\n\n      // Check HTML block types\n      if (lineType == \"TMPara\" && htmlBlock === false) {\n        for (let htmlBlockType of htmlBlockGrammar) {\n          if (this.lines[lineNum].match(htmlBlockType.start)) {\n            // Matching start condition. Check if this tag can start here (not all start conditions allow breaking a paragraph).\n            if (\n              htmlBlockType.paraInterrupt ||\n              lineNum == 0 ||\n              !(\n                this.lineTypes[lineNum - 1] == \"TMPara\" ||\n                this.lineTypes[lineNum - 1] == \"TMUL\" ||\n                this.lineTypes[lineNum - 1] == \"TMOL\" ||\n                this.lineTypes[lineNum - 1] == \"TMBlockquote\"\n              )\n            ) {\n              htmlBlock = htmlBlockType;\n              break;\n            }\n          }\n        }\n      }\n\n      if (htmlBlock !== false) {\n        lineType = \"TMHTMLBlock\";\n        lineReplacement = '<span class=\"TMHTMLContent\">$0<br /></span>'; // No formatting in TMHTMLBlock\n        lineCapture = [this.lines[lineNum]]; // This should already be set but better safe than sorry\n\n        // Check if HTML block should be closed\n        if (htmlBlock.end) {\n          // Specific end condition\n          if (this.lines[lineNum].match(htmlBlock.end)) {\n            htmlBlock = false;\n          }\n        } else {\n          // No specific end condition, ends with blank line\n          if (\n            lineNum == this.lines.length - 1 ||\n            this.lines[lineNum + 1].match(lineGrammar.TMBlankLine.regexp)\n          ) {\n            htmlBlock = false;\n          }\n        }\n      }\n\n      // Check all regexps if we haven't applied one of the code block types\n      if (lineType == \"TMPara\") {\n        for (let type in lineGrammar) {\n          if (lineGrammar[type].regexp) {\n            let capture = lineGrammar[type].regexp.exec(this.lines[lineNum]);\n            if (capture) {\n              lineType = type;\n              lineReplacement = lineGrammar[type].replacement;\n              lineCapture = capture;\n              break;\n            }\n          }\n        }\n      }\n\n      // If we've opened a code block, remember that\n      if (\n        lineType == \"TMCodeFenceBacktickOpen\" ||\n        lineType == \"TMCodeFenceTildeOpen\"\n      ) {\n        codeBlockType = lineType;\n        codeBlockSeqLength = lineCapture.groups[\"seq\"].length;\n      }\n\n      // Link reference definition and indented code can't interrupt a paragraph\n      if (\n        (lineType == \"TMIndentedCode\" ||\n          lineType == \"TMLinkReferenceDefinition\") &&\n        lineNum > 0 &&\n        (this.lineTypes[lineNum - 1] == \"TMPara\" ||\n          this.lineTypes[lineNum - 1] == \"TMUL\" ||\n          this.lineTypes[lineNum - 1] == \"TMOL\" ||\n          this.lineTypes[lineNum - 1] == \"TMBlockquote\")\n      ) {\n        // Fall back to TMPara\n        lineType = \"TMPara\";\n        lineCapture = [this.lines[lineNum]];\n        lineReplacement = \"$$0\";\n      }\n\n      // Setext H2 markers that can also be interpreted as an empty list item should be regarded as such (as per CommonMark spec)\n      if (lineType == \"TMSetextH2Marker\") {\n        let capture = lineGrammar.TMUL.regexp.exec(this.lines[lineNum]);\n        if (capture) {\n          lineType = \"TMUL\";\n          lineReplacement = lineGrammar.TMUL.replacement;\n          lineCapture = capture;\n        }\n      }\n\n      // Setext headings are only valid if preceded by a paragraph (and if so, they change the type of the previous paragraph)\n      if (lineType == \"TMSetextH1Marker\" || lineType == \"TMSetextH2Marker\") {\n        if (lineNum == 0 || this.lineTypes[lineNum - 1] != \"TMPara\") {\n          // Setext marker is invalid. However, a H2 marker might still be a valid HR, so let's check that\n          let capture = lineGrammar.TMHR.regexp.exec(this.lines[lineNum]);\n          if (capture) {\n            // Valid HR\n            lineType = \"TMHR\";\n            lineCapture = capture;\n            lineReplacement = lineGrammar.TMHR.replacement;\n          } else {\n            // Not valid HR, format as TMPara\n            lineType = \"TMPara\";\n            lineCapture = [this.lines[lineNum]];\n            lineReplacement = \"$$0\";\n          }\n        } else {\n          // Valid setext marker. Change types of preceding para lines\n          let headingLine = lineNum - 1;\n          const headingLineType =\n            lineType == \"TMSetextH1Marker\" ? \"TMSetextH1\" : \"TMSetextH2\";\n          do {\n            if (this.lineTypes[headingLineType] != headingLineType) {\n              this.lineTypes[headingLine] = headingLineType;\n              this.lineDirty[headingLineType] = true;\n            }\n            this.lineReplacements[headingLine] = \"$$0\";\n            this.lineCaptures[headingLine] = [this.lines[headingLine]];\n\n            headingLine--;\n          } while (headingLine >= 0 && this.lineTypes[headingLine] == \"TMPara\");\n        }\n      }\n      // Lastly, save the line style to be applied later\n      if (this.lineTypes[lineNum] != lineType) {\n        this.lineTypes[lineNum] = lineType;\n        this.lineDirty[lineNum] = true;\n      }\n      this.lineReplacements[lineNum] = lineReplacement;\n      this.lineCaptures[lineNum] = lineCapture;\n    }\n  }\n\n  /**\n   * Updates all line contents from the HTML, then re-applies formatting.\n   */\n  updateLineContentsAndFormatting() {\n    this.clearDirtyFlag();\n    this.updateLineContents();\n    this.updateFormatting();\n  }\n\n  /**\n   * Attempts to parse a link or image at the current position. This assumes that the opening [ or ![ has already been matched.\n   * Returns false if this is not a valid link, image. See below for more information\n   * @param {string} originalString The original string, starting at the opening marker ([ or ![)\n   * @param {boolean} isImage Whether or not this is an image (opener == ![)\n   * @returns false if not a valid link / image.\n   * Otherwise returns an object with two properties: output is the string to be included in the processed output,\n   * charCount is the number of input characters (from originalString) consumed.\n   */\n  parseLinkOrImage(originalString, isImage) {\n    // Skip the opening bracket\n    let textOffset = isImage ? 2 : 1;\n    let opener = originalString.substr(0, textOffset);\n    let type = isImage ? \"TMImage\" : \"TMLink\";\n    let currentOffset = textOffset;\n\n    let bracketLevel = 1;\n    let linkText = false;\n    let linkRef = false;\n    let linkLabel = [];\n    let linkDetails = []; // If matched, this will be an array: [whitespace + link destination delimiter, link destination, link destination delimiter, whitespace, link title delimiter, link title, link title delimiter + whitespace]. All can be empty strings.\n\n    textOuter: while (\n      currentOffset < originalString.length &&\n      linkText === false /* empty string is okay */\n    ) {\n      let string = originalString.substr(currentOffset);\n\n      // Capture any escapes and code blocks at current position, they bind more strongly than links\n      // We don't have to actually process them here, that'll be done later in case the link / image is valid, but we need to skip over them.\n      for (let rule of [\"escape\", \"code\", \"autolink\", \"html\"]) {\n        let cap = inlineGrammar[rule].regexp.exec(string);\n        if (cap) {\n          currentOffset += cap[0].length;\n          continue textOuter;\n        }\n      }\n\n      // Check for image. It's okay for an image to be included in a link or image\n      if (string.match(inlineGrammar.imageOpen.regexp)) {\n        // Opening image. It's okay if this is a matching pair of brackets\n        bracketLevel++;\n        currentOffset += 2;\n        continue textOuter;\n      }\n\n      // Check for link (not an image because that would have been captured and skipped over above)\n      if (string.match(inlineGrammar.linkOpen.regexp)) {\n        // Opening bracket. Two things to do:\n        // 1) it's okay if this part of a pair of brackets.\n        // 2) If we are currently trying to parse a link, this nested bracket musn't start a valid link (no nested links allowed)\n        bracketLevel++;\n        // if (bracketLevel >= 2) return false; // Nested unescaped brackets, this doesn't qualify as a link / image\n        if (!isImage) {\n          if (this.parseLinkOrImage(string, false)) {\n            // Valid link inside this possible link, which makes this link invalid (inner links beat outer ones)\n            return false;\n          }\n        }\n        currentOffset += 1;\n        continue textOuter;\n      }\n\n      // Check for closing bracket\n      if (string.match(/^\\]/)) {\n        bracketLevel--;\n        if (bracketLevel == 0) {\n          // Found matching bracket and haven't found anything disqualifying this as link / image.\n          linkText = originalString.substr(\n            textOffset,\n            currentOffset - textOffset\n          );\n          currentOffset++;\n          continue textOuter;\n        }\n      }\n\n      // Nothing matches, proceed to next char\n      currentOffset++;\n    }\n\n    // Did we find a link text (i.e., find a matching closing bracket?)\n    if (linkText === false) return false; // Nope\n\n    // So far, so good. We've got a valid link text. Let's see what type of link this is\n    let nextChar =\n      currentOffset < originalString.length\n        ? originalString.substr(currentOffset, 1)\n        : \"\";\n\n    // REFERENCE LINKS\n    if (nextChar == \"[\") {\n      let string = originalString.substr(currentOffset);\n      let cap = inlineGrammar.linkLabel.regexp.exec(string);\n      if (cap) {\n        // Valid link label\n        currentOffset += cap[0].length;\n        linkLabel.push(cap[1], cap[2], cap[3]);\n        if (cap[inlineGrammar.linkLabel.labelPlaceholder]) {\n          // Full reference link\n          linkRef = cap[inlineGrammar.linkLabel.labelPlaceholder];\n        } else {\n          // Collapsed reference link\n          linkRef = linkText.trim();\n        }\n      } else {\n        // Not a valid link label\n        return false;\n      }\n    } else if (nextChar != \"(\") {\n      // Shortcut ref link\n      linkRef = linkText.trim();\n\n      // INLINE LINKS\n    } else {\n      // nextChar == '('\n\n      // Potential inline link\n      currentOffset++;\n\n      let parenthesisLevel = 1;\n      inlineOuter: while (\n        currentOffset < originalString.length &&\n        parenthesisLevel > 0\n      ) {\n        let string = originalString.substr(currentOffset);\n\n        // Process whitespace\n        let cap = /^\\s+/.exec(string);\n        if (cap) {\n          switch (linkDetails.length) {\n            case 0:\n              linkDetails.push(cap[0]);\n              break; // Opening whitespace\n            case 1:\n              linkDetails.push(cap[0]);\n              break; // Open destination, but not a destination yet; desination opened with <\n            case 2: // Open destination with content in it. Whitespace only allowed if opened by angle bracket, otherwise this closes the destination\n              if (linkDetails[0].match(/</)) {\n                linkDetails[1] = linkDetails[1].concat(cap[0]);\n              } else {\n                if (parenthesisLevel != 1) return false; // Unbalanced parenthesis\n                linkDetails.push(\"\"); // Empty end delimiter for destination\n                linkDetails.push(cap[0]); // Whitespace in between destination and title\n              }\n              break;\n            case 3:\n              linkDetails.push(cap[0]);\n              break; // Whitespace between destination and title\n            case 4:\n              return false; // This should never happen (no opener for title yet, but more whitespace to capture)\n            case 5:\n              linkDetails.push(\"\"); // Whitespace at beginning of title, push empty title and continue\n            case 6:\n              linkDetails[5] = linkDetails[5].concat(cap[0]);\n              break; // Whitespace in title\n            case 7:\n              linkDetails[6] = linkDetails[6].concat(cap[0]);\n              break; // Whitespace after closing delimiter\n            default:\n              return false; // We should never get here\n          }\n          currentOffset += cap[0].length;\n          continue inlineOuter;\n        }\n\n        // Process backslash escapes\n        cap = inlineGrammar.escape.regexp.exec(string);\n        if (cap) {\n          switch (linkDetails.length) {\n            case 0:\n              linkDetails.push(\"\"); // this opens the link destination, add empty opening delimiter and proceed to next case\n            case 1:\n              linkDetails.push(cap[0]);\n              break; // This opens the link destination, append it\n            case 2:\n              linkDetails[1] = linkDetails[1].concat(cap[0]);\n              break; // Part of the link destination\n            case 3:\n              return false; // Lacking opening delimiter for link title\n            case 4:\n              return false; // Lcaking opening delimiter for link title\n            case 5:\n              linkDetails.push(\"\"); // This opens the link title\n            case 6:\n              linkDetails[5] = linkDetails[5].concat(cap[0]);\n              break; // Part of the link title\n            default:\n              return false; // After link title was closed, without closing parenthesis\n          }\n          currentOffset += cap[0].length;\n          continue inlineOuter;\n        }\n\n        // Process opening angle bracket as deilimiter of destination\n        if (linkDetails.length < 2 && string.match(/^</)) {\n          if (linkDetails.length == 0) linkDetails.push(\"\");\n          linkDetails[0] = linkDetails[0].concat(\"<\");\n          currentOffset++;\n          continue inlineOuter;\n        }\n\n        // Process closing angle bracket as delimiter of destination\n        if (\n          (linkDetails.length == 1 || linkDetails.length == 2) &&\n          string.match(/^>/)\n        ) {\n          if (linkDetails.length == 1) linkDetails.push(\"\"); // Empty link destination\n          linkDetails.push(\">\");\n          currentOffset++;\n          continue inlineOuter;\n        }\n\n        // Process  non-parenthesis delimiter for title.\n        cap = /^[\"']/.exec(string);\n        // For this to be a valid opener, we have to either have no destination, only whitespace so far,\n        // or a destination with trailing whitespace.\n        if (\n          cap &&\n          (linkDetails.length == 0 ||\n            linkDetails.length == 1 ||\n            linkDetails.length == 4)\n        ) {\n          while (linkDetails.length < 4) linkDetails.push(\"\");\n          linkDetails.push(cap[0]);\n          currentOffset++;\n          continue inlineOuter;\n        }\n\n        // For this to be a valid closer, we have to have an opener and some or no title, and this has to match the opener\n        if (\n          cap &&\n          (linkDetails.length == 5 || linkDetails.length == 6) &&\n          linkDetails[4] == cap[0]\n        ) {\n          if (linkDetails.length == 5) linkDetails.push(\"\"); // Empty link title\n          linkDetails.push(cap[0]);\n          currentOffset++;\n          continue inlineOuter;\n        }\n        // Other cases (linkDetails.length == 2, 3, 7) will be handled with the \"default\" case below.\n\n        // Process opening parenthesis\n        if (string.match(/^\\(/)) {\n          switch (linkDetails.length) {\n            case 0:\n              linkDetails.push(\"\"); // this opens the link destination, add empty opening delimiter and proceed to next case\n            case 1:\n              linkDetails.push(\"\"); // This opens the link destination\n            case 2: // Part of the link destination\n              linkDetails[1] = linkDetails[1].concat(\"(\");\n              if (!linkDetails[0].match(/<$/)) parenthesisLevel++;\n              break;\n            case 3:\n              linkDetails.push(\"\"); //  opening delimiter for link title\n            case 4:\n              linkDetails.push(\"(\");\n              break; // opening delimiter for link title\n            case 5:\n              linkDetails.push(\"\"); // opens the link title, add empty title content and proceed to next case\n            case 6: // Part of the link title. Un-escaped parenthesis only allowed in \" or ' delimited title\n              if (linkDetails[4] == \"(\") return false;\n              linkDetails[5] = linkDetails[5].concat(\"(\");\n              break;\n            default:\n              return false; // After link title was closed, without closing parenthesis\n          }\n          currentOffset++;\n          continue inlineOuter;\n        }\n\n        // Process closing parenthesis\n        if (string.match(/^\\)/)) {\n          if (linkDetails.length <= 2) {\n            // We are inside the link destination. Parentheses have to be matched if not in angle brackets\n            while (linkDetails.length < 2) linkDetails.push(\"\");\n\n            if (!linkDetails[0].match(/<$/)) parenthesisLevel--;\n\n            if (parenthesisLevel > 0) {\n              linkDetails[1] = linkDetails[1].concat(\")\");\n            }\n          } else if (linkDetails.length == 5 || linkDetails.length == 6) {\n            // We are inside the link title.\n            if (linkDetails[4] == \"(\") {\n              // This closes the link title\n              if (linkDetails.length == 5) linkDetails.push(\"\");\n              linkDetails.push(\")\");\n            } else {\n              // Just regular ol' content\n              if (linkDetails.length == 5) linkDetails.push(\")\");\n              else linkDetails[5] = linkDetails[5].concat(\")\");\n            }\n          } else {\n            parenthesisLevel--; // This should decrease it from 1 to 0...\n          }\n\n          if (parenthesisLevel == 0) {\n            // No invalid condition, let's make sure the linkDetails array is complete\n            while (linkDetails.length < 7) linkDetails.push(\"\");\n          }\n\n          currentOffset++;\n          continue inlineOuter;\n        }\n\n        // Any old character\n        cap = /^./.exec(string);\n        if (cap) {\n          switch (linkDetails.length) {\n            case 0:\n              linkDetails.push(\"\"); // this opens the link destination, add empty opening delimiter and proceed to next case\n            case 1:\n              linkDetails.push(cap[0]);\n              break; // This opens the link destination, append it\n            case 2:\n              linkDetails[1] = linkDetails[1].concat(cap[0]);\n              break; // Part of the link destination\n            case 3:\n              return false; // Lacking opening delimiter for link title\n            case 4:\n              return false; // Lcaking opening delimiter for link title\n            case 5:\n              linkDetails.push(\"\"); // This opens the link title\n            case 6:\n              linkDetails[5] = linkDetails[5].concat(cap[0]);\n              break; // Part of the link title\n            default:\n              return false; // After link title was closed, without closing parenthesis\n          }\n          currentOffset += cap[0].length;\n          continue inlineOuter;\n        }\n        throw \"Infinite loop\"; // we should never get here since the last test matches any character\n      }\n      if (parenthesisLevel > 0) return false; // Parenthes(es) not closed\n    }\n\n    if (linkRef !== false) {\n      // Ref link; check that linkRef is valid\n      let valid = false;\n      for (let label of this.linkLabels) {\n        if (label == linkRef) {\n          valid = true;\n          break;\n        }\n      }\n      let label = valid\n        ? \"TMLinkLabel TMLinkLabel_Valid\"\n        : \"TMLinkLabel TMLinkLabel_Invalid\";\n      let output = `<span class=\"TMMark TMMark_${type}\">${opener}</span><span class=\"${type} ${\n        linkLabel.length < 3 || !linkLabel[1] ? label : \"\"\n      }\">${this.processInlineStyles(\n        linkText\n      )}</span><span class=\"TMMark TMMark_${type}\">]</span>`;\n\n      if (linkLabel.length >= 3) {\n        output = output.concat(\n          `<span class=\"TMMark TMMark_${type}\">${linkLabel[0]}</span>`,\n          `<span class=\"${label}\">${linkLabel[1]}</span>`,\n          `<span class=\"TMMark TMMark_${type}\">${linkLabel[2]}</span>`\n        );\n      }\n      return {\n        output: output,\n        charCount: currentOffset,\n      };\n    } else if (linkDetails) {\n      // Inline link\n\n      // This should never happen, but better safe than sorry.\n      while (linkDetails.length < 7) {\n        linkDetails.push(\"\");\n      }\n\n      return {\n        output: `<span class=\"TMMark TMMark_${type}\">${opener}</span><span class=\"${type}\">${this.processInlineStyles(\n          linkText\n        )}</span><span class=\"TMMark TMMark_${type}\">](${\n          linkDetails[0]\n        }</span><span class=\"${type}Destination\">${\n          linkDetails[1]\n        }</span><span class=\"TMMark TMMark_${type}\">${linkDetails[2]}${\n          linkDetails[3]\n        }${linkDetails[4]}</span><span class=\"${type}Title\">${\n          linkDetails[5]\n        }</span><span class=\"TMMark TMMark_${type}\">${linkDetails[6]})</span>`,\n        charCount: currentOffset,\n      };\n    }\n\n    return false;\n  }\n\n  /**\n   * Formats a markdown string as HTML, using Markdown inline formatting.\n   * @param {string} originalString The input (markdown inline formatted) string\n   * @returns {string} The HTML formatted output\n   */\n  processInlineStyles(originalString) {\n    let processed = \"\";\n    let stack = []; // Stack is an array of objects of the format: {delimiter, delimString, count, output}\n    let offset = 0;\n    let string = originalString;\n\n    outer: while (string) {\n      // Process simple rules (non-delimiter)\n      for (let rule of [\"escape\", \"code\", \"autolink\", \"html\"]) {\n        let cap = inlineGrammar[rule].regexp.exec(string);\n        if (cap) {\n          string = string.substr(cap[0].length);\n          offset += cap[0].length;\n          processed += inlineGrammar[rule].replacement\n            // .replace(/\\$\\$([1-9])/g, (str, p1) => processInlineStyles(cap[p1])) // todo recursive calling\n            .replace(/\\$([1-9])/g, (str, p1) => htmlescape(cap[p1]));\n          continue outer;\n        }\n      }\n\n      // Check for links / images\n      let potentialLink = string.match(inlineGrammar.linkOpen.regexp);\n      let potentialImage = string.match(inlineGrammar.imageOpen.regexp);\n      if (potentialImage || potentialLink) {\n        let result = this.parseLinkOrImage(string, potentialImage);\n        if (result) {\n          processed = `${processed}${result.output}`;\n          string = string.substr(result.charCount);\n          offset += result.charCount;\n          continue outer;\n        }\n      }\n\n      // Check for em / strong delimiters\n      let cap = /(^\\*+)|(^_+)/.exec(string);\n      if (cap) {\n        let delimCount = cap[0].length;\n        const delimString = cap[0];\n        const currentDelimiter = cap[0][0]; // This should be * or _\n\n        string = string.substr(cap[0].length);\n\n        // We have a delimiter run. Let's check if it can open or close an emphasis.\n\n        const preceding = offset > 0 ? originalString.substr(0, offset) : \" \"; // beginning and end of line count as whitespace\n        const following =\n          offset + cap[0].length < originalString.length ? string : \" \";\n\n        const punctuationFollows = following.match(punctuationLeading);\n        const punctuationPrecedes = preceding.match(punctuationTrailing);\n        const whitespaceFollows = following.match(/^\\s/);\n        const whitespacePrecedes = preceding.match(/\\s$/);\n\n        // These are the rules for right-flanking and left-flanking delimiter runs as per CommonMark spec\n        let canOpen =\n          !whitespaceFollows &&\n          (!punctuationFollows ||\n            !!whitespacePrecedes ||\n            !!punctuationPrecedes);\n        let canClose =\n          !whitespacePrecedes &&\n          (!punctuationPrecedes || !!whitespaceFollows || !!punctuationFollows);\n\n        // Underscores have more detailed rules than just being part of left- or right-flanking run:\n        if (currentDelimiter == \"_\" && canOpen && canClose) {\n          canOpen = punctuationPrecedes;\n          canClose = punctuationFollows;\n        }\n\n        // If the delimiter can close, check the stack if there's something it can close\n        if (canClose) {\n          let stackPointer = stack.length - 1;\n          // See if we can find a matching opening delimiter, move down through the stack\n          while (delimCount && stackPointer >= 0) {\n            if (stack[stackPointer].delimiter == currentDelimiter) {\n              // We found a matching delimiter, let's construct the formatted string\n\n              // Firstly, if we skipped any stack levels, pop them immediately (non-matching delimiters)\n              while (stackPointer < stack.length - 1) {\n                const entry = stack.pop();\n                processed = `${entry.output}${entry.delimString.substr(\n                  0,\n                  entry.count\n                )}${processed}`;\n              }\n\n              // Then, format the string\n              if (delimCount >= 2 && stack[stackPointer].count >= 2) {\n                // Strong\n                processed = `<span class=\"TMMark\">${currentDelimiter}${currentDelimiter}</span><strong class=\"TMStrong\">${processed}</strong><span class=\"TMMark\">${currentDelimiter}${currentDelimiter}</span>`;\n                delimCount -= 2;\n                stack[stackPointer].count -= 2;\n              } else {\n                // Em\n                processed = `<span class=\"TMMark\">${currentDelimiter}</span><em class=\"TMEm\">${processed}</em><span class=\"TMMark\">${currentDelimiter}</span>`;\n                delimCount -= 1;\n                stack[stackPointer].count -= 1;\n              }\n\n              // If that stack level is empty now, pop it\n              if (stack[stackPointer].count == 0) {\n                let entry = stack.pop();\n                processed = `${entry.output}${processed}`;\n                stackPointer--;\n              }\n            } else {\n              // This stack level's delimiter type doesn't match the current delimiter type\n              // Go down one level in the stack\n              stackPointer--;\n            }\n          }\n        }\n        // If there are still delimiters left, and the delimiter run can open, push it on the stack\n        if (delimCount && canOpen) {\n          stack.push({\n            delimiter: currentDelimiter,\n            delimString: delimString,\n            count: delimCount,\n            output: processed,\n          });\n          processed = \"\"; // Current formatted output has been pushed on the stack and will be prepended when the stack gets popped\n          delimCount = 0;\n        }\n\n        // Any delimiters that are left (closing unmatched) are appended to the output.\n        if (delimCount) {\n          processed = `${processed}${delimString.substr(0, delimCount)}`;\n        }\n\n        offset += cap[0].length;\n        continue outer;\n      }\n\n      // Check for strikethrough delimiter\n      cap = /^~~/.exec(string);\n      if (cap) {\n        let consumed = false;\n        let stackPointer = stack.length - 1;\n        // See if we can find a matching opening delimiter, move down through the stack\n        while (!consumed && stackPointer >= 0) {\n          if (stack[stackPointer].delimiter == \"~\") {\n            // We found a matching delimiter, let's construct the formatted string\n\n            // Firstly, if we skipped any stack levels, pop them immediately (non-matching delimiters)\n            while (stackPointer < stack.length - 1) {\n              const entry = stack.pop();\n              processed = `${entry.output}${entry.delimString.substr(\n                0,\n                entry.count\n              )}${processed}`;\n            }\n\n            // Then, format the string\n            processed = `<span class=\"TMMark\">~~</span><del class=\"TMStrikethrough\">${processed}</del><span class=\"TMMark\">~~</span>`;\n            let entry = stack.pop();\n            processed = `${entry.output}${processed}`;\n            consumed = true;\n          } else {\n            // This stack level's delimiter type doesn't match the current delimiter type\n            // Go down one level in the stack\n            stackPointer--;\n          }\n        }\n\n        // If there are still delimiters left, and the delimiter run can open, push it on the stack\n        if (!consumed) {\n          stack.push({\n            delimiter: \"~\",\n            delimString: \"~~\",\n            count: 2,\n            output: processed,\n          });\n          processed = \"\"; // Current formatted output has been pushed on the stack and will be prepended when the stack gets popped\n        }\n\n        offset += cap[0].length;\n        string = string.substr(cap[0].length);\n        continue outer;\n      }\n\n      // Process 'default' rule\n      cap = inlineGrammar.default.regexp.exec(string);\n      if (cap) {\n        string = string.substr(cap[0].length);\n        offset += cap[0].length;\n        processed += inlineGrammar.default.replacement.replace(\n          /\\$([1-9])/g,\n          (str, p1) => htmlescape(cap[p1])\n        );\n        continue outer;\n      }\n      throw \"Infinite loop!\";\n    }\n\n    // Empty the stack, any opening delimiters are unused\n    while (stack.length) {\n      const entry = stack.pop();\n      processed = `${entry.output}${entry.delimString.substr(\n        0,\n        entry.count\n      )}${processed}`;\n    }\n\n    return processed;\n  }\n\n  /**\n   * Clears the line dirty flag (resets it to an array of false)\n   */\n  clearDirtyFlag() {\n    this.lineDirty = new Array(this.lines.length);\n    for (let i = 0; i < this.lineDirty.length; i++) {\n      this.lineDirty[i] = false;\n    }\n  }\n\n  /**\n   * Updates the class properties (lines, lineElements) from the DOM.\n   * @returns true if contents changed\n   */\n  updateLineContents() {\n    // this.lineDirty = [];\n    // Check if we have changed anything about the number of lines (inserted or deleted a paragraph)\n    // < 0 means line(s) removed; > 0 means line(s) added\n    let lineDelta = this.e.childElementCount - this.lines.length;\n    if (lineDelta) {\n      // yup. Let's try how much we can salvage (find out which lines from beginning and end were unchanged)\n      // Find lines from the beginning that haven't changed...\n      let firstChangedLine = 0;\n      while (\n        firstChangedLine <= this.lines.length &&\n        firstChangedLine <= this.lineElements.length &&\n        this.lineElements[firstChangedLine] && // Check that the line element hasn't been deleted\n        this.lines[firstChangedLine] ==\n          this.lineElements[firstChangedLine].textContent &&\n        this.lineTypes[firstChangedLine] ==\n          this.lineElements[firstChangedLine].className\n      ) {\n        firstChangedLine++;\n      }\n\n      // End also from the end\n      let lastChangedLine = -1;\n      while (\n        -lastChangedLine < this.lines.length &&\n        -lastChangedLine < this.lineElements.length &&\n        this.lines[this.lines.length + lastChangedLine] ==\n          this.lineElements[this.lineElements.length + lastChangedLine]\n            .textContent &&\n        this.lineTypes[this.lines.length + lastChangedLine] ==\n          this.lineElements[this.lineElements.length + lastChangedLine]\n            .className\n      ) {\n        lastChangedLine--;\n      }\n\n      let linesToDelete =\n        this.lines.length + lastChangedLine + 1 - firstChangedLine;\n      if (linesToDelete < -lineDelta) linesToDelete = -lineDelta;\n      if (linesToDelete < 0) linesToDelete = 0;\n\n      let linesToAdd = [];\n      for (let l = 0; l < linesToDelete + lineDelta; l++) {\n        linesToAdd.push(this.lineElements[firstChangedLine + l].textContent);\n      }\n      this.spliceLines(firstChangedLine, linesToDelete, linesToAdd, false);\n    } else {\n      // No lines added or removed\n      for (let line = 0; line < this.lineElements.length; line++) {\n        let e = this.lineElements[line];\n        let ct = e.textContent;\n        if (this.lines[line] !== ct || this.lineTypes[line] !== e.className) {\n          // Line changed, update it\n          this.lines[line] = ct;\n          this.lineTypes[line] = e.className;\n          this.lineDirty[line] = true;\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes a new paragraph.\n   * @param sel The current selection\n   */\n  processNewParagraph(sel) {\n    if (!sel) return;\n\n    // Update lines from content\n    this.updateLineContents();\n\n    let continuableType = false;\n    // Let's see if we need to continue a list\n\n    let checkLine = sel.col > 0 ? sel.row : sel.row - 1;\n    switch (this.lineTypes[checkLine]) {\n      case \"TMUL\":\n        continuableType = \"TMUL\";\n        break;\n      case \"TMOL\":\n        continuableType = \"TMOL\";\n        break;\n      case \"TMIndentedCode\":\n        continuableType = \"TMIndentedCode\";\n        break;\n    }\n\n    let lines = this.lines[sel.row]\n      .replace(/\\n\\n$/, \"\\n\")\n      .split(/(?:\\r\\n|\\n|\\r)/);\n    if (lines.length > 1) {\n      // New line\n      this.spliceLines(sel.row, 1, lines, true);\n      sel.row++;\n      sel.col = 0;\n    }\n\n    if (continuableType) {\n      // Check if the previous line was non-empty\n      let capture = lineGrammar[continuableType].regexp.exec(\n        this.lines[sel.row - 1]\n      );\n      if (capture) {\n        // Convention: capture[1] is the line type marker, capture[2] is the content\n        if (capture[2]) {\n          // Previous line has content, continue the continuable type\n\n          // Hack for OL: increment number\n          if (continuableType == \"TMOL\") {\n            capture[1] = capture[1].replace(/\\d{1,9}/, (result) => {\n              return parseInt(result[0]) + 1;\n            });\n          }\n          this.lines[sel.row] = `${capture[1]}${this.lines[sel.row]}`;\n          this.lineDirty[sel.row] = true;\n          sel.col = capture[1].length;\n        } else {\n          // Previous line has no content, remove the continuable type from the previous row\n          this.lines[sel.row - 1] = \"\";\n          this.lineDirty[sel.row - 1] = true;\n        }\n      }\n    }\n    this.updateFormatting();\n  }\n\n  // /**\n  //  * Processes a \"delete\" input action.\n  //  * @param {object} focus The selection\n  //  * @param {boolean} forward If true, performs a forward delete, otherwise performs a backward delete\n  //  */\n  // processDelete(focus, forward) {\n  //   if (!focus) return;\n  //   let anchor = this.getSelection(true);\n  //   // Do we have a non-empty selection?\n  //   if (focus.col != anchor.col || focus.row != anchor.row) {\n  //     // non-empty. direction doesn't matter.\n  //     this.paste('', anchor, focus);\n  //   } else {\n  //     if (forward) {\n  //       if (focus.col < this.lines[focus.row].length) this.paste('', {row: focus.row, col: focus.col + 1}, focus);\n  //       else if (focus.col < this.lines.length) this.paste('', {row: focus.row + 1, col: 0}, focus);\n  //       // Otherwise, we're at the very end and can't delete forward\n  //     } else {\n  //       if (focus.col > 0) this.paste('', {row: focus.row, col: focus.col - 1}, focus);\n  //       else if (focus.row > 0) this.paste('', {row: focus.row - 1, col: this.lines[focus.row - 1].length - 1}, focus);\n  //       // Otherwise, we're at the very beginning and can't delete backwards\n  //     }\n  //   }\n\n  // }\n\n  /**\n   * Gets the current position of the selection counted by row and column of the editor Markdown content (as opposed to the position in the DOM).\n   *\n   * @param {boolean} getAnchor if set to true, gets the selection anchor (start point of the selection), otherwise gets the focus (end point).\n   * @return {object} An object representing the selection, with properties col and row.\n   */\n  getSelection(getAnchor = false) {\n    const selection = window.getSelection();\n    let startNode = getAnchor ? selection.anchorNode : selection.focusNode;\n    if (!startNode) return null;\n    let offset = getAnchor ? selection.anchorOffset : selection.focusOffset;\n    if (startNode == this.e) {\n      if (offset < this.lines.length)\n        return {\n          row: offset,\n          col: 0,\n        };\n      return {\n        row: offset - 1,\n        col: this.lines[offset - 1].length,\n      };\n    }\n\n    let col = this.computeColumn(startNode, offset);\n    if (col === null) return null; // We are outside of the editor\n\n    // Find the row node\n    let node = startNode;\n    while (node.parentElement != this.e) {\n      node = node.parentElement;\n    }\n\n    let row = 0;\n    // Check if we can read a line number from the data-line-num attribute.\n    // The last condition is a security measure since inserting a new paragraph copies the previous rows' line number\n    if (\n      node.dataset &&\n      node.dataset.lineNum &&\n      (!node.previousSibling ||\n        node.previousSibling.dataset.lineNum != node.dataset.lineNum)\n    ) {\n      row = parseInt(node.dataset.lineNum);\n    } else {\n      while (node.previousSibling) {\n        row++;\n        node = node.previousSibling;\n      }\n    }\n    return { row: row, col: col, node: startNode };\n  }\n\n  /**\n   * Computes a column within an editor line from a node and offset within that node.\n   * @param {Node} startNode The node\n   * @param {int} offset THe selection\n   * @returns {int} the column, or null if the node is not inside the editor\n   */\n  computeColumn(startNode, offset) {\n    let node = startNode;\n    let col;\n    // First, make sure we're actually in the editor.\n    while (node && node.parentNode != this.e) {\n      node = node.parentNode;\n    }\n    if (node == null) return null;\n\n    // There are two ways that offset can be defined:\n    // - Either, the node is a text node, in which case it is the offset within the text\n    // - Or, the node is an element with child notes, in which case the offset refers to the\n    //   child node after which the selection is located\n    if (startNode.nodeType === Node.TEXT_NODE || offset === 0) {\n      // In the case that the node is non-text node but the offset is 0,\n      // The selection is at the beginning of that element so we\n      // can simply use the same approach as if it were at the beginning\n      // of a text node.\n      col = offset;\n      node = startNode;\n    } else if (offset > 0) {\n      node = startNode.childNodes[offset - 1];\n      col = node.textContent.length;\n    }\n    while (node.parentNode != this.e) {\n      if (node.previousSibling) {\n        node = node.previousSibling;\n        col += node.textContent.length;\n      } else {\n        node = node.parentNode;\n      }\n    }\n    return col;\n  }\n\n  /**\n   * Computes DOM node and offset within that node from a position expressed as row and column.\n   * @param {int} row Row (line number)\n   * @param {int} col Column\n   * @returns An object with two properties: node and offset. offset may be null;\n   */\n  computeNodeAndOffset(row, col, bindRight = false) {\n    if (row >= this.lineElements.length) {\n      // Selection past the end of text, set selection to end of text\n      row = this.lineElements.length - 1;\n      col = this.lines[row].length;\n    }\n    if (col > this.lines[row].length) {\n      col = this.lines[row].length;\n    }\n    const parentNode = this.lineElements[row];\n    let node = parentNode.firstChild;\n\n    let childrenComplete = false;\n    // default return value\n    let rv = {\n      node: parentNode.firstChild ? parentNode.firstChild : parentNode,\n      offset: 0,\n    };\n\n    while (node != parentNode) {\n      if (!childrenComplete && node.nodeType === Node.TEXT_NODE) {\n        if (node.nodeValue.length >= col) {\n          if (bindRight && node.nodeValue.length == col) {\n            // Selection is at the end of this text node, but we are binding right (prefer an offset of 0 in the next text node)\n            // Remember return value in case we don't find another text node\n            rv = { node: node, offset: col };\n            col = 0;\n          } else {\n            return { node: node, offset: col };\n          }\n        } else {\n          col -= node.nodeValue.length;\n        }\n      }\n      if (!childrenComplete && node.firstChild) {\n        node = node.firstChild;\n      } else if (node.nextSibling) {\n        childrenComplete = false;\n        node = node.nextSibling;\n      } else {\n        childrenComplete = true;\n        node = node.parentNode;\n      }\n    }\n\n    // Either, the position was invalid and we just return the default return value\n    // Or we are binding right and the selection is at the end of the line\n    return rv;\n  }\n\n  /**\n   * Sets the selection based on rows and columns within the editor Markdown content.\n   * @param {object} focus Object representing the selection, needs to have properties row and col.\n   * @param anchor Anchor of the selection. If not given, assumes the current anchor.\n   */\n  setSelection(focus, anchor = null) {\n    if (!focus) return;\n\n    let range = document.createRange();\n\n    let { node: focusNode, offset: focusOffset } = this.computeNodeAndOffset(\n      focus.row,\n      focus.col,\n      anchor && anchor.row == focus.row && anchor.col > focus.col\n    ); // Bind selection right if anchor is in the same row and behind the focus\n    let anchorNode = null,\n      anchorOffset = null;\n    if (anchor && (anchor.row != focus.row || anchor.col != focus.col)) {\n      let { node, offset } = this.computeNodeAndOffset(\n        anchor.row,\n        anchor.col,\n        focus.row == anchor.row && focus.col > anchor.col\n      );\n      anchorNode = node;\n      anchorOffset = offset;\n    }\n\n    if (anchorNode) range.setStart(anchorNode, anchorOffset);\n    else range.setStart(focusNode, focusOffset);\n    range.setEnd(focusNode, focusOffset);\n\n    let windowSelection = window.getSelection();\n    windowSelection.removeAllRanges();\n    windowSelection.addRange(range);\n  }\n\n  /**\n   * Event handler for input events\n   */\n  handleInputEvent(event) {\n    // For composition input, we are only updating the text after we have received\n    // a compositionend event, so we return upon insertCompositionText.\n    // Otherwise, the DOM changes break the text input.\n    if (event.inputType == \"insertCompositionText\") return;\n\n    let focus = this.getSelection();\n\n    if (\n      (event.inputType == \"insertParagraph\" ||\n        event.inputType == \"insertLineBreak\") &&\n      focus\n    ) {\n      this.clearDirtyFlag();\n      this.processNewParagraph(focus);\n    } else {\n      if (!this.e.firstChild) {\n        this.e.innerHTML = '<div class=\"TMBlankLine\"><br></div>';\n      } else {\n        this.fixNodeHierarchy();\n      }\n      this.updateLineContentsAndFormatting();\n    }\n    if (focus) {\n      this.setSelection(focus);\n    }\n\n    this.fireChange();\n  }\n\n  /**\n   * Fixes the node hierarchy – makes sure that each line is in a div, and there are no nested divs\n   */\n  fixNodeHierarchy() {\n    const originalChildren = Array.from(this.e.childNodes);\n\n    const replaceChild = (child, ...newChildren) => {\n      const parent = child.parentElement;\n      const nextSibling = child.nextSibling;\n      parent.removeChild(child);\n      newChildren.forEach((newChild) =>\n        nextSibling\n          ? parent.insertBefore(newChild, nextSibling)\n          : parent.appendChild(newChild)\n      );\n    };\n\n    originalChildren.forEach((child) => {\n      if (child.nodeType !== Node.ELEMENT_NODE || child.tagName !== \"DIV\") {\n        // Found a child node that's either not an element or not a div. Wrap it in a div.\n        const divWrapper = document.createElement(\"div\");\n        replaceChild(child, divWrapper);\n        divWrapper.appendChild(child);\n      } else if (child.childNodes.length == 0) {\n        // Empty div child node, include at least a <br />\n        child.appendChild(document.createElement(\"br\"));\n      } else {\n        const grandChildren = Array.from(child.childNodes);\n        if (\n          grandChildren.some(\n            (grandChild) =>\n              grandChild.nodeType === Node.ELEMENT_NODE &&\n              grandChild.tagName === \"DIV\"\n          )\n        ) {\n          return replaceChild(child, grandChildren);\n        }\n      }\n    });\n  }\n\n  /**\n   * Event handler for the \"drop\" event\n   */\n  handleDrop(event) {\n    event.preventDefault();\n\n    this.fireDrop(event.dataTransfer);\n  }\n\n  /**\n   * Event handler for \"selectionchange\" events.\n   */\n  handleSelectionChangeEvent() {\n    this.fireSelection();\n  }\n\n  /**\n   * Convenience function to \"splice\" new lines into the arrays this.lines, this.lineDirty, this.lineTypes, and the DOM elements\n   * underneath the editor element.\n   * This method is essentially Array.splice, only that the third parameter takes an un-spread array (and the forth parameter)\n   * determines whether the DOM should also be adjusted.\n   *\n   * @param {int} startLine Position at which to start changing the array of lines\n   * @param {int} linesToDelete Number of lines to delete\n   * @param {array} linesToInsert Array of strings representing the lines to be inserted\n   * @param {boolean} adjustLineElements If true, then <div> elements are also inserted in the DOM at the respective position\n   */\n  spliceLines(\n    startLine,\n    linesToDelete = 0,\n    linesToInsert = [],\n    adjustLineElements = true\n  ) {\n    if (adjustLineElements) {\n      for (let i = 0; i < linesToDelete; i++) {\n        this.e.removeChild(this.e.childNodes[startLine]);\n      }\n    }\n\n    let insertedBlank = [];\n    let insertedDirty = [];\n\n    for (let i = 0; i < linesToInsert.length; i++) {\n      insertedBlank.push(\"\");\n      insertedDirty.push(true);\n      if (adjustLineElements) {\n        if (this.e.childNodes[startLine])\n          this.e.insertBefore(\n            document.createElement(\"div\"),\n            this.e.childNodes[startLine]\n          );\n        else this.e.appendChild(document.createElement(\"div\"));\n      }\n    }\n\n    this.lines.splice(startLine, linesToDelete, ...linesToInsert);\n    this.lineTypes.splice(startLine, linesToDelete, ...insertedBlank);\n    this.lineDirty.splice(startLine, linesToDelete, ...insertedDirty);\n  }\n\n  /**\n   * Event handler for the \"paste\" event\n   */\n  handlePaste(event) {\n    event.preventDefault();\n\n    // get text representation of clipboard\n    let text = (event.originalEvent || event).clipboardData.getData(\n      \"text/plain\"\n    );\n\n    // insert text manually\n    this.paste(text);\n  }\n\n  /**\n   * Pastes the text at the current selection (or at the end, if no current selection)\n   * @param {string} text\n   */\n  paste(text, anchor = null, focus = null) {\n    if (!anchor) anchor = this.getSelection(true);\n    if (!focus) focus = this.getSelection(false);\n    let beginning, end;\n    if (!focus) {\n      focus = {\n        row: this.lines.length - 1,\n        col: this.lines[this.lines.length - 1].length,\n      }; // Insert at end\n    }\n    if (!anchor) {\n      anchor = focus;\n    }\n    if (\n      anchor.row < focus.row ||\n      (anchor.row == focus.row && anchor.col <= focus.col)\n    ) {\n      beginning = anchor;\n      end = focus;\n    } else {\n      beginning = focus;\n      end = anchor;\n    }\n    let insertedLines = text.split(/(?:\\r\\n|\\r|\\n)/);\n    let lineBefore = this.lines[beginning.row].substr(0, beginning.col);\n    let lineEnd = this.lines[end.row].substr(end.col);\n    insertedLines[0] = lineBefore.concat(insertedLines[0]);\n    let endColPos = insertedLines[insertedLines.length - 1].length;\n    insertedLines[insertedLines.length - 1] =\n      insertedLines[insertedLines.length - 1].concat(lineEnd);\n    this.spliceLines(beginning.row, 1 + end.row - beginning.row, insertedLines);\n    focus.row = beginning.row + insertedLines.length - 1;\n    focus.col = endColPos;\n    this.updateFormatting();\n    this.setSelection(focus);\n    this.fireChange();\n  }\n\n  /**\n   * Computes the (lowest in the DOM tree) common ancestor of two DOM nodes.\n   * @param {Node} node1 the first node\n   * @param {Node} node2 the second node\n   * @returns {Node} The commen ancestor node, or null if there is no common ancestor\n   */\n  computeCommonAncestor(node1, node2) {\n    if (!node1 || !node2) return null;\n    if (node1 == node2) return node1;\n    const ancestry = (node) => {\n      let ancestry = [];\n      while (node) {\n        ancestry.unshift(node);\n        node = node.parentNode;\n      }\n      return ancestry;\n    };\n\n    const ancestry1 = ancestry(node1);\n    const ancestry2 = ancestry(node2);\n\n    if (ancestry1[0] != ancestry2[0]) return null;\n    let i;\n    for (i = 0; ancestry1[i] == ancestry2[i]; i++);\n    return ancestry1[i - 1];\n  }\n\n  /**\n   * Finds the (lowest in the DOM tree) enclosing DOM node with a given class.\n   * @param {object} focus The focus selection object\n   * @param {object} anchor The anchor selection object\n   * @param {string} className The class name to find\n   * @returns {Node} The enclosing DOM node with the respective class (inside the editor), if there is one; null otherwise.\n   */\n  computeEnclosingMarkupNode(focus, anchor, className) {\n    let node = null;\n    if (!focus) return null;\n    if (!anchor) {\n      node = focus.node;\n    } else {\n      if (focus.row != anchor.row) return null;\n      node = this.computeCommonAncestor(focus.node, anchor.node);\n    }\n    if (!node) return null;\n    while (node != this.e) {\n      if (node.className && node.className.includes(className)) return node;\n      node = node.parentNode;\n    }\n    // Ascended all the way to the editor element\n    return null;\n  }\n\n  /**\n   * Returns the state (true / false) of all commands.\n   * @param focus Focus of the selection. If not given, assumes the current focus.\n   * @param anchor Anchor of the selection. If not given, assumes the current anchor.\n   */\n  getCommandState(focus = null, anchor = null) {\n    let commandState = {};\n    if (!focus) focus = this.getSelection(false);\n    if (!anchor) anchor = this.getSelection(true);\n    if (!focus) {\n      for (let cmd in commands) {\n        commandState[cmd] = null;\n      }\n      return commandState;\n    }\n    if (!anchor) anchor = focus;\n\n    let start, end;\n    if (\n      anchor.row < focus.row ||\n      (anchor.row == focus.row && anchor.col < focus.col)\n    ) {\n      start = anchor;\n      end = focus;\n    } else {\n      start = focus;\n      end = anchor;\n    }\n    if (end.row > start.row && end.col == 0) {\n      end.row--;\n      end.col = this.lines[end.row].length; // Selection to beginning of next line is said to end at the beginning of the last line\n    }\n\n    for (let cmd in commands) {\n      if (commands[cmd].type == \"inline\") {\n        if (\n          !focus ||\n          focus.row != anchor.row ||\n          !this.isInlineFormattingAllowed(focus, anchor)\n        ) {\n          commandState[cmd] = null;\n        } else {\n          // The command state is true if there is a respective enclosing markup node (e.g., the selection is enclosed in a <b>..</b>) ...\n          commandState[cmd] =\n            !!this.computeEnclosingMarkupNode(\n              focus,\n              anchor,\n              commands[cmd].className\n            ) ||\n            // ... or if it's an empty string preceded by and followed by formatting markers, e.g. **|** where | is the cursor\n            (focus.col == anchor.col &&\n              !!this.lines[focus.row]\n                .substr(0, focus.col)\n                .match(commands[cmd].unset.prePattern) &&\n              !!this.lines[focus.row]\n                .substr(focus.col)\n                .match(commands[cmd].unset.postPattern));\n        }\n      }\n      if (commands[cmd].type == \"line\") {\n        if (!focus) {\n          commandState[cmd] = null;\n        } else {\n          let state = this.lineTypes[start.row] == commands[cmd].className;\n\n          for (let line = start.row; line <= end.row; line++) {\n            if ((this.lineTypes[line] == commands[cmd].className) != state) {\n              state = null;\n              break;\n            }\n          }\n          commandState[cmd] = state;\n        }\n      }\n    }\n    return commandState;\n  }\n\n  /**\n   * Sets a command state\n   * @param {string} command\n   * @param {boolean} state\n   */\n  setCommandState(command, state) {\n    if (commands[command].type == \"inline\") {\n      let anchor = this.getSelection(true);\n      let focus = this.getSelection(false);\n      if (!anchor) anchor = focus;\n      if (!anchor) return;\n      if (anchor.row != focus.row) return;\n      if (!this.isInlineFormattingAllowed(focus, anchor)) return;\n      let markupNode = this.computeEnclosingMarkupNode(\n        focus,\n        anchor,\n        commands[command].className\n      );\n      this.clearDirtyFlag();\n\n      // First case: There's an enclosing markup node, remove the markers around that markup node\n      if (markupNode) {\n        this.lineDirty[focus.row] = true;\n        const startCol = this.computeColumn(markupNode, 0);\n        const len = markupNode.textContent.length;\n        const left = this.lines[focus.row]\n          .substr(0, startCol)\n          .replace(commands[command].unset.prePattern, \"\");\n        const mid = this.lines[focus.row].substr(startCol, len);\n        const right = this.lines[focus.row]\n          .substr(startCol + len)\n          .replace(commands[command].unset.postPattern, \"\");\n        this.lines[focus.row] = left.concat(mid, right);\n        anchor.col = left.length;\n        focus.col = anchor.col + len;\n        this.updateFormatting();\n        this.setSelection(focus, anchor);\n        this.fireChange();\n\n        // Second case: Empty selection with surrounding formatting markers, remove those\n      } else if (\n        focus.col == anchor.col &&\n        !!this.lines[focus.row]\n          .substr(0, focus.col)\n          .match(commands[command].unset.prePattern) &&\n        !!this.lines[focus.row]\n          .substr(focus.col)\n          .match(commands[command].unset.postPattern)\n      ) {\n        this.lineDirty[focus.row] = true;\n        const left = this.lines[focus.row]\n          .substr(0, focus.col)\n          .replace(commands[command].unset.prePattern, \"\");\n        const right = this.lines[focus.row]\n          .substr(focus.col)\n          .replace(commands[command].unset.postPattern, \"\");\n        this.lines[focus.row] = left.concat(right);\n        focus.col = anchor.col = left.length;\n        this.updateFormatting();\n        this.setSelection(focus, anchor);\n        this.fireChange();\n\n        // Not currently formatted, insert formatting markers\n      } else {\n        // Trim any spaces from the selection\n        let { startCol, endCol } =\n          focus.col < anchor.col\n            ? { startCol: focus.col, endCol: anchor.col }\n            : { startCol: anchor.col, endCol: focus.col };\n\n        let match = this.lines[focus.row]\n          .substr(startCol, endCol - startCol)\n          .match(/^(?<leading>\\s*).*\\S(?<trailing>\\s*)$/);\n        if (match) {\n          startCol += match.groups.leading.length;\n          endCol -= match.groups.trailing.length;\n        }\n\n        focus.col = startCol;\n        anchor.col = endCol;\n\n        // Just insert markup before and after and hope for the best.\n        this.wrapSelection(\n          commands[command].set.pre,\n          commands[command].set.post,\n          focus,\n          anchor\n        );\n        this.fireChange();\n        // TODO clean this up so that markup remains properly nested\n      }\n    } else if (commands[command].type == \"line\") {\n      let anchor = this.getSelection(true);\n      let focus = this.getSelection(false);\n      if (!anchor) anchor = focus;\n      if (!focus) return;\n      this.clearDirtyFlag();\n      let start = anchor.row > focus.row ? focus : anchor;\n      let end = anchor.row > focus.row ? anchor : focus;\n      if (end.row > start.row && end.col == 0) {\n        end.row--;\n      }\n\n      for (let line = start.row; line <= end.row; line++) {\n        if (state && this.lineTypes[line] != commands[command].className) {\n          this.lines[line] = this.lines[line].replace(\n            commands[command].set.pattern,\n            commands[command].set.replacement.replace(\n              \"$#\",\n              line - start.row + 1\n            )\n          );\n          this.lineDirty[line] = true;\n        }\n        if (!state && this.lineTypes[line] == commands[command].className) {\n          this.lines[line] = this.lines[line].replace(\n            commands[command].unset.pattern,\n            commands[command].unset.replacement\n          );\n          this.lineDirty[line] = true;\n        }\n      }\n      this.updateFormatting();\n      this.setSelection(\n        { row: end.row, col: this.lines[end.row].length },\n        { row: start.row, col: 0 }\n      );\n      this.fireChange();\n    }\n  }\n\n  /**\n   * Returns whether or not inline formatting is allowed at the current focus\n   * @param {object} focus The current focus\n   */\n  isInlineFormattingAllowed() {\n    // TODO Remove parameters from all calls\n    const sel = window.getSelection();\n    if (!sel || !sel.focusNode || !sel.anchorNode) return false;\n\n    // Check if we can find a common ancestor with the class `TMInlineFormatted`\n\n    // Special case: Empty selection right before `TMInlineFormatted`\n    if (\n      sel.isCollapsed &&\n      sel.focusNode.nodeType == 3 &&\n      sel.focusOffset == sel.focusNode.nodeValue.length\n    ) {\n      let node;\n      for (\n        node = sel.focusNode;\n        node && node.nextSibling == null;\n        node = node.parentNode\n      );\n      if (\n        node &&\n        node.nextSibling.className &&\n        node.nextSibling.className.includes(\"TMInlineFormatted\")\n      )\n        return true;\n    }\n\n    // Look for a common ancestor\n    let ancestor = this.computeCommonAncestor(sel.focusNode, sel.anchorNode);\n    if (!ancestor) return false;\n\n    // Check if there's an ancestor of class 'TMInlineFormatted' or 'TMBlankLine'\n    while (ancestor && ancestor != this.e) {\n      if (\n        ancestor.className &&\n        typeof ancestor.className.includes == \"function\" &&\n        (ancestor.className.includes(\"TMInlineFormatted\") ||\n          ancestor.className.includes(\"TMBlankLine\"))\n      )\n        return true;\n      ancestor = ancestor.parentNode;\n    }\n\n    return false;\n  }\n\n  /**\n   * Wraps the current selection in the strings pre and post. If the selection is not on one line, returns.\n   * @param {string} pre The string to insert before the selection.\n   * @param {string} post The string to insert after the selection.\n   * @param {object} focus The current selection focus. If null, selection will be computed.\n   * @param {object} anchor The current selection focus. If null, selection will be computed.\n   */\n  wrapSelection(pre, post, focus = null, anchor = null) {\n    if (!focus) focus = this.getSelection(false);\n    if (!anchor) anchor = this.getSelection(true);\n    if (!focus || !anchor || focus.row != anchor.row) return;\n    this.lineDirty[focus.row] = true;\n\n    const startCol = focus.col < anchor.col ? focus.col : anchor.col;\n    const endCol = focus.col < anchor.col ? anchor.col : focus.col;\n    const left = this.lines[focus.row].substr(0, startCol).concat(pre);\n    const mid =\n      endCol == startCol\n        ? \"\"\n        : this.lines[focus.row].substr(startCol, endCol - startCol);\n    const right = post.concat(this.lines[focus.row].substr(endCol));\n    this.lines[focus.row] = left.concat(mid, right);\n    anchor.col = left.length;\n    focus.col = anchor.col + mid.length;\n\n    this.updateFormatting();\n    this.setSelection(focus, anchor);\n  }\n\n  /**\n   * Toggles the command state for a command (true <-> false)\n   * @param {string} command The editor command\n   */\n  toggleCommandState(command) {\n    if (!this.lastCommandState) this.lastCommandState = this.getCommandState();\n    this.setCommandState(command, !this.lastCommandState[command]);\n  }\n\n  /**\n   * Fires a change event. Updates the linked textarea and notifies any event listeners.\n   */\n  fireChange() {\n    if (!this.textarea && !this.listeners.change.length) return;\n    const content = this.getContent();\n    if (this.textarea) this.textarea.value = content;\n    for (let listener of this.listeners.change) {\n      listener({\n        content: content,\n        linesDirty: this.linesDirty,\n      });\n    }\n  }\n\n  /**\n   * Fires a \"selection changed\" event.\n   */\n  fireSelection() {\n    if (this.listeners.selection && this.listeners.selection.length) {\n      let focus = this.getSelection(false);\n      let anchor = this.getSelection(true);\n      let commandState = this.getCommandState(focus, anchor);\n      if (this.lastCommandState) {\n        Object.assign(this.lastCommandState, commandState);\n      } else {\n        this.lastCommandState = Object.assign({}, commandState);\n      }\n      for (let listener of this.listeners.selection) {\n        listener({\n          focus: focus,\n          anchor: anchor,\n          commandState: this.lastCommandState,\n        });\n      }\n    }\n  }\n\n  /**\n   * Fires a drop event.\n   */\n  fireDrop(dataTransfer) {\n    for (let listener of this.listeners.drop) {\n      listener({\n        dataTransfer,\n      });\n    }\n  }\n\n  /**\n   * Adds an event listener.\n   * @param {string} type The type of event to listen to. Can be 'change', 'selection' or 'drop'.\n   * @param {*} listener Function of the type (event) => {} to be called when the event occurs.\n   */\n  addEventListener(type, listener) {\n    if (type.match(/^(?:change|input)$/i)) {\n      this.listeners.change.push(listener);\n    }\n    if (type.match(/^(?:selection|selectionchange)$/i)) {\n      this.listeners.selection.push(listener);\n    }\n    if (type.match(/^(?:drop)$/i)) {\n      this.listeners.drop.push(listener);\n    }\n  }\n}\n\nexport default Editor;\n"],"names":["svg","blockquote","bold","clear_formatting","code","h1","h2","hr","image","italic","link","ol","strikethrough","ul","isMacLike","test","navigator","platform","DefaultCommands","name","action","innerHTML","title","hotkey","editor","isInlineFormattingAllowed","wrapSelection","enabled","focus","anchor","paste","CommandBar","constructor","props","e","commands","buttons","state","hotkeys","element","tagName","document","getElementById","body","createCommandBarElement","addEventListener","handleKeydown","setEditor","parentElement","createElement","className","command","el","appendChild","commandName","Object","assign","keys","split","modifiers","modifierexplanation","i","length","push","match","key","toLowerCase","concat","join","handleClick","event","preventDefault","setCommandState","handleSelection","commandState","undefined","outer","modifier","check","it","Math","module","globalThis","window","self","global","this","Function","exec","error","fails","require","defineProperty","get","bind","hasOwnProperty","NATIVE_BIND","FunctionPrototype","prototype","call","uncurryThisWithBind","fn","apply","arguments","documentAll","all","IS_HTMLDDA","$documentAll","argument","isNullOrUndefined","$TypeError","TypeError","requireObjectCoercible","$Object","uncurryThis","toObject","hasOwn","DESCRIPTORS","getDescriptor","getOwnPropertyDescriptor","EXISTS","PROPER","something","CONFIGURABLE","configurable","value","writable","defineGlobalProperty","SHARED","store","isCallable","functionToString","toString","inspectSource","WeakMap","String","isObject","a","$String","aFunction","namespace","method","isPrototypeOf","userAgent","process","Deno","versions","version","v8","V8_VERSION","getOwnPropertySymbols","symbol","Symbol","sham","NATIVE_SYMBOL","iterator","getBuiltIn","USE_SYMBOL_AS_UID","$Symbol","tryToString","aCallable","V","P","func","input","pref","val","valueOf","mode","copyright","license","source","id","postfix","random","shared","uid","WellKnownSymbolsStore","createWellKnownSymbol","withoutSetter","isSymbol","getMethod","ordinaryToPrimitive","wellKnownSymbol","TO_PRIMITIVE","exoticToPrim","result","toPrimitive","IE8_DOM_DEFINE","V8_PROTOTYPE_DEFINE_BUG","anObject","toPropertyKey","$defineProperty","$getOwnPropertyDescriptor","ENUMERABLE","WRITABLE","exports","O","Attributes","current","enumerable","bitmap","definePropertyModule","createPropertyDescriptor","object","f","NATIVE_WEAK_MAP","createNonEnumerableProperty","sharedKey","OBJECT_ALREADY_INITIALIZED","set","has","enforce","getterFor","TYPE","type","metadata","facade","STATE","CONFIGURABLE_FUNCTION_NAME","InternalStateModule","enforceInternalState","getInternalState","stringSlice","slice","replace","CONFIGURABLE_LENGTH","TEMPLATE","makeBuiltIn","options","getter","setter","arity","target","descriptor","that","hasIndices","ignoreCase","multiline","dotAll","unicode","unicodeSets","sticky","defineBuiltInAccessor","regExpFlags","RegExp","RegExpPrototype","FORCED","INDICES_SUPPORT","calls","expected","addGetter","chr","pairs","replacements","ASCIIPunctuation","NotTriggerChar","Scheme","Email","HTMLOpenTag","HTMLCloseTag","HTMLTagName","HTMLComment","HTMLPI","HTMLDeclaration","HTMLCDATA","HTMLAttribute","HTMLAttValue","KnownTag","punctuationLeading","punctuationTrailing","lineGrammar","TMH1","regexp","replacement","TMH2","TMH3","TMH4","TMH5","TMH6","TMBlockquote","TMCodeFenceBacktickOpen","TMCodeFenceTildeOpen","TMCodeFenceBacktickClose","TMCodeFenceTildeClose","TMBlankLine","TMSetextH1Marker","TMSetextH2Marker","TMHR","TMUL","TMOL","TMIndentedCode","TMLinkReferenceDefinition","labelPlaceholder","htmlBlockGrammar","start","end","paraInterrupt","inlineGrammar","escape","autolink","html","linkOpen","imageOpen","linkLabel","default","replacementRegexp","inlineRules","rule","re","string","flags","htmlescape","pre","post","unset","prePattern","postPattern","pattern","h3","h4","h5","h6","Editor","textarea","lines","lineElements","lineTypes","lineCaptures","lineReplacements","linkLabels","lineDirty","lastCommandState","listeners","change","selection","drop","getElementsByTagName","parentNode","style","display","createEditorElement","setContent","content","classList","add","contentEditable","whiteSpace","webkitUserModify","nextSibling","insertBefore","handleInputEvent","handleSelectionChangeEvent","handlePaste","handleDrop","childNodes","firstChild","removeChild","lineNum","le","Array","updateFormatting","fireChange","getContent","updateLineTypes","updateLinkLabels","applyLineTypes","l","capture","str","p1","p2","processInlineStyles","contentHTML","removeAttribute","dataset","codeBlockType","codeBlockSeqLength","htmlBlock","lineType","lineCapture","lineReplacement","groups","htmlBlockType","headingLine","headingLineType","updateLineContentsAndFormatting","clearDirtyFlag","updateLineContents","parseLinkOrImage","originalString","isImage","textOffset","opener","substr","currentOffset","bracketLevel","linkText","linkRef","linkDetails","textOuter","cap","nextChar","trim","parenthesisLevel","inlineOuter","valid","label","output","charCount","processed","stack","offset","potentialLink","potentialImage","delimCount","delimString","currentDelimiter","preceding","following","punctuationFollows","punctuationPrecedes","whitespaceFollows","whitespacePrecedes","canOpen","canClose","stackPointer","delimiter","entry","pop","count","consumed","lineDelta","childElementCount","firstChangedLine","textContent","lastChangedLine","linesToDelete","linesToAdd","spliceLines","line","ct","processNewParagraph","sel","continuableType","checkLine","col","row","parseInt","getSelection","getAnchor","startNode","anchorNode","focusNode","anchorOffset","focusOffset","computeColumn","node","previousSibling","nodeType","Node","TEXT_NODE","computeNodeAndOffset","bindRight","childrenComplete","rv","nodeValue","setSelection","range","createRange","setStart","setEnd","windowSelection","removeAllRanges","addRange","inputType","fixNodeHierarchy","originalChildren","from","replaceChild","child","parent","_len","newChildren","_key","forEach","newChild","ELEMENT_NODE","divWrapper","grandChildren","some","grandChild","fireDrop","dataTransfer","fireSelection","startLine","linesToInsert","adjustLineElements","insertedBlank","insertedDirty","splice","text","originalEvent","clipboardData","getData","beginning","insertedLines","lineBefore","lineEnd","endColPos","computeCommonAncestor","node1","node2","ancestry","unshift","ancestry1","ancestry2","computeEnclosingMarkupNode","includes","getCommandState","cmd","markupNode","startCol","len","left","mid","right","endCol","leading","trailing","isCollapsed","ancestor","toggleCommandState","listener","linesDirty"],"mappings":"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","x_google_ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]}