"""add slug, excerpt, tags fields to posts with indexes

Revision ID: ccf5d3c8c30a
Revises: b1542a3df25f
Create Date: 2025-06-16 19:29:18.572859

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ccf5d3c8c30a'
down_revision = 'b1542a3df25f'
branch_labels = None
depends_on = None


def upgrade():
    # Add columns with slug initially nullable
    op.add_column('posts', sa.Column('slug', sa.String(length=255), nullable=True))
    op.add_column('posts', sa.Column('excerpt', sa.Text(), nullable=True))
    op.add_column('posts', sa.Column('tags', sa.String(length=500), nullable=True))
    
    # Populate data for existing posts
    connection = op.get_bind()
    
    # Simple slugify function to avoid external dependencies in migration
    import re
    def simple_slugify(text):
        if not text:
            return "untitled"
        slug = re.sub(r'[^\w\s-]', '', text.lower())
        return re.sub(r'[\s_-]+', '-', slug).strip('-') or "untitled"
    
    # Get existing posts and populate slug and excerpt
    posts = connection.execute(sa.text("SELECT id, title, markdown_content FROM posts")).fetchall()
    for post in posts:
        slug = simple_slugify(post.title)
        
        # Handle duplicate slugs by appending counter
        counter = 1
        original_slug = slug
        while connection.execute(sa.text("SELECT id FROM posts WHERE slug = :slug"), {"slug": slug}).fetchone():
            slug = f"{original_slug}-{counter}"
            counter += 1
        
        # Extract simple excerpt (first non-header line)
        excerpt = ""
        if post.markdown_content:
            lines = post.markdown_content.strip().split('\n')
            for line in lines:
                line = line.strip()
                if line and not line.startswith('#'):
                    excerpt = line[:200] + '...' if len(line) > 200 else line
                    break
        
        connection.execute(
            sa.text("UPDATE posts SET slug = :slug, excerpt = :excerpt WHERE id = :id"),
            {"slug": slug, "excerpt": excerpt, "id": post.id}
        )
    
    # Now make slug not nullable and add constraints
    op.alter_column('posts', 'slug', nullable=False)
    op.create_index(op.f('ix_posts_published'), 'posts', ['published'], unique=False)
    op.create_index(op.f('ix_posts_slug'), 'posts', ['slug'], unique=True)
    op.create_index(op.f('ix_posts_tags'), 'posts', ['tags'], unique=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_posts_tags'), table_name='posts')
    op.drop_index(op.f('ix_posts_slug'), table_name='posts')
    op.drop_index(op.f('ix_posts_published'), table_name='posts')
    op.drop_column('posts', 'tags')
    op.drop_column('posts', 'excerpt')
    op.drop_column('posts', 'slug')
    # ### end Alembic commands ###
